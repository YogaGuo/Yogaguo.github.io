<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼儿的技术博客</title>
  
  <subtitle>夏虫不可语冰，井蛙不可语海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Yogaguo.github.io/"/>
  <updated>2019-09-11T09:53:49.319Z</updated>
  <id>https://Yogaguo.github.io/</id>
  
  <author>
    <name>小鱼儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet入门与Tomcat基本配置</title>
    <link href="https://Yogaguo.github.io/2019/09/11/Demo3/"/>
    <id>https://Yogaguo.github.io/2019/09/11/Demo3/</id>
    <published>2019-09-11T09:49:40.000Z</published>
    <updated>2019-09-11T09:53:49.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ul><li>概念：servlet applet,运行在服务器端的小程序,servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则 </li><li>将来我们自定义一个类，实现复写Servlet接口，复写方法.  <h4 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h4></li><li>1.创建JavaEE的项目<br><img src="https://wx3.sinaimg.cn/large/006VKolAly1g6eefc9a4pj30c40dtq36.jpg" alt="cf5ba6a73b2c9f25369c7670a4611e6"></li><li>2.定义一个类，实现Servlet接口，实现接口中的抽象方法<br><code>public class ServletDemo01 implements Servlet</code></li><li>3.配置Servlet，在web.xml中配置 <pre><code>&lt;!--配置Servlet --&gt;  &lt;servlet&gt;      &lt;servlet-name&gt;demo01&lt;/servlet-name&gt;      &lt;servlet-class&gt;cn.yogaguo.web.servlet.ServletDemo01&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;      &lt;servlet-name&gt;demo01&lt;/servlet-name&gt;      &lt;url-pattern&gt;/demo01&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;  </code></pre><ul><li>4.执行原理:  <ul><li>当服务端接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径  </li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。如果有，则在找到对应的<servlet-class>全类名  </servlet-class></url-pattern></li><li>tomcat会将字节码文件加载到内存，并且创建其对象  </li><li>调用其方法  <h4 id="Servlet中的生命周期"><a href="#Servlet中的生命周期" class="headerlink" title="Servlet中的生命周期:"></a>Servlet中的生命周期:</h4></li></ul></li></ul></li><li>被创建:执行init方法,只执行一次  <ul><li>Servlet什么时候被创建  <ul><li>默认情况下，第一次被访问，Servlet被创建  </li><li>当然，可以配置Servlet的创建时机    </li></ul>  <strong>在<servlet>标签下配置</servlet></strong>  <pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;demo02&lt;/servlet-name&gt;    &lt;servlet-class&gt;cn.yogaguo.web.servlet.ServletDemo02&lt;/servlet-class&gt;    &lt;!--指定Servlet的创建时机           1.第一次被访问时，创建                * &lt;load-on-startup&gt;的值为负数，对应1情况（默认值为-1）           2.在服务器启动时，创建                * &lt;load-on-startup&gt;的值为0或正整数           --&gt;    &lt;load-on-startup&gt;5&lt;/load-on-startup&gt;&lt;/servlet&gt;  </code></pre></li></ul><strong>Servlet的init方法只执行一次，说明了一个Servlet在内存中只存在一个对象，Servlet是单例的,所以，多个用户访问时，可能存在线程安全问题</strong><br><del>尝试加锁，但是不行，影响了性能</del>,<strong><em>解决办法：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要对其修改值，避免并发的操作</em></strong></li><li>提供服务:执行service方法，执行多次<br>每次访问Servlet时，Service方法都会被调用一次</li><li>被销毁：执行destory方法，只执行一次<br>Servlet被销毁时执行，即服务器正常关闭时，<strong>注意：destory方法在Servlet被销毁之前执行，一般用于释放资源</strong>  <h4 id="解决Servlet配置问题"><a href="#解决Servlet配置问题" class="headerlink" title="解决Servlet配置问题"></a>解决Servlet配置问题</h4></li><li>Servlet3.0之后，支持注解配置，可以不需要web.xml<br><img src="https://ws4.sinaimg.cn/large/006VKolAly1g6eehsd44wj307s04it8i.jpg" alt="81a774e2229978ac5be5cbd0f4967b6"></li><li>步骤：  </li></ul><p>1.创建JavaEE的项目,选择Servlet的版本，3.0以上，可以不创建web.xml<br>2.定义一个类，实现Servlet接口<br>3.复写方法<br><strong>4.在类上使用@WebServlet注解，进行配置</strong><br><code>@WebServlet(urlPatterns = &quot;/资源路径&quot;)</code>  </p><h4 id="IDEA与Tamcat的相关配置"><a href="#IDEA与Tamcat的相关配置" class="headerlink" title="IDEA与Tamcat的相关配置"></a>IDEA与Tamcat的相关配置</h4><ul><li>1.IDEA会为每一个tomcat部署的项目单独建立一份配置文件<br>查看控制台的输出log:Using CATALINA_BASE:   “C:\Users\LENOVO.IntelliJIdea2018.2\system\tomcat_Test”  </li><li>2.工作空间目录和Tomcat部署的web项目  <ul><li><strong>Tomcat真正访问的是“Tomcat部署的web项目，以我电脑为例 D:\IntelliJIDEA2018\Test\out\artifacts\TestDemo02_war_exploded”，Tomcat部署的web项目对应着工作空间项目的web目录下的所有资源，而且web-INFO下的classes对应的字节码文件是工作空间src下的Java文件被编译后放到里面的</strong>  </li><li><strong><em>WEB_INFO目录下的资源不能被浏览器直接访问，所以一般不把一些静态资源放到这下面</em></strong>  </li><li>在Tomcat如何断点调试<br>使用“小虫子”启动<br><img src="https://wx3.sinaimg.cn/large/006VKolAly1g6eisf84htj307j02tjr6.jpg" alt="315772ceda1476ff9a038df9da49207">  </li></ul></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念：servlet applet,运行在服务器端的小程序,servlet就是一个接口，
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
      <category term="Tomcat" scheme="https://Yogaguo.github.io/categories/Servlet/Tomcat/"/>
    
    
      <category term="servler" scheme="https://Yogaguo.github.io/tags/servler/"/>
    
  </entry>
  
  <entry>
    <title>Web相关知识入门</title>
    <link href="https://Yogaguo.github.io/2019/09/11/Demo2/"/>
    <id>https://Yogaguo.github.io/2019/09/11/Demo2/</id>
    <published>2019-09-11T09:07:56.000Z</published>
    <updated>2019-09-11T09:12:07.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web服务入门介绍"><a href="#Web服务入门介绍" class="headerlink" title="Web服务入门介绍"></a>Web服务入门介绍</h2><ul><li><p>web相关概念回顾</p></li><li><p>web服务器软件:Tomcat</p></li><li><p>Servlet入门学习  </p><h3 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h3></li><li><p>1.软件架构  </p><ul><li>1.C/S:客户端/服务器端    </li><li>2.B/S:浏览器/服务器端 (重点) </li></ul></li><li><p>2.资源分类  </p><ul><li>1.静态资源:所有用户访问后，得到的结果都是一样的,静态资源可以直接被浏览器解析 * 如:html,css,Javascript  </li><li>2.动态资源:每个用户访问相同资源后，得到的结果可能不一样 ,动态资源被访问后需要先转为静态资源，再返回给浏览器(Response) *如 servlet/jsp,php  </li></ul></li><li><p>3.网络通讯三要素  </p><ul><li>1.IP:电子设备在网络中的唯一标识 </li><li>2.端口:应用程序在计算机中的唯一标识 0-65535</li><li>3.传输协议:规定了数据传输的规范<ul><li>1.基础协议:  <ul><li>1.tcp:安全的协议，三次握手确认双方都在线，在进行传输 ，速度稍慢 </li><li>2.udp:不安全协议，速度快  <h3 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h3></li></ul></li></ul></li></ul></li><li><p>1.服务器：安装了服务器软件的计算机  </p></li><li><p>2.服务器软件:接受用户的请求，处理请求，做出响应  </p></li><li><p>web服务器软件：接受用户的请求，处理请求，做出响应   </p><ul><li>1.在web服务器软件中可以部署web项目，让用户通过浏览器来访问这些项目  </li><li>2.web容器  </li></ul></li><li><p>3.常见java相关的web服务器软件  </p><ul><li>1.webLogic:oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的  </li><li>2.webSphere:IBW公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的    </li><li>3.JBOSS:JBOSS公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的  </li><li>4.Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范(servlet/jsp),开源的，免费的  </li></ul></li><li><p>4.JavaEE:Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范  </p><h3 id="Tomcat-web服务器软件"><a href="#Tomcat-web服务器软件" class="headerlink" title="Tomcat:web服务器软件"></a>Tomcat:web服务器软件</h3></li><li><p>1.下载: <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官网地址</a>  </p></li><li><p>2.安装: 解压压缩包 (<strong>注意：安装目录建议不要有中文和空格</strong>) </p></li><li><p>3.卸载: 删除目录就行  </p></li><li><p>4.启动:bin/startup.bat双击该文件  </p><ul><li>1.访问自己：浏览器输入：(<a href="http://localhost:8888)(我自己该的端口号，默认8080)" target="_blank" rel="noopener">http://localhost:8888)(我自己该的端口号，默认8080)</a> 回车访问  </li><li>2.访问别人:(http://别人ip:8080)  </li><li>3.可能遇到的问题:  <ul><li>1.黑窗口一闪而过：没有正确配置JAVA_HOME环境变量  </li><li>2.启动报错：<ul><li>1.暴力解决-&gt;找到占用的端口号，并且找到对应进程，杀死该进程.  </li><li>2.温柔解决:修改自身端口号,   conf/server.xml     服务器的主配置文件   <strong>注意：改动此文件时先备份，以防改错</strong>  <pre><code>&lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;       connectionTimeout=&quot;20000&quot;       redirectPort=&quot;8443&quot; /&gt;  </code></pre></li></ul></li></ul></li></ul></li><li><p>5.关闭:</p><ul><li>1.bin目录命令窗口直接敲  shutdown/catalina stop 二者都可以,或者直接双击shutdown文件</li></ul></li><li><p>6.配置:</p><ul><li>1.部署项目的方式：  <ul><li>1.直接将项目放到webapps目录下即可  <ul><li><ol><li>/hello:项目的访问路径—&gt;虚拟目录  </li></ol></li><li>2.简单部署：将项目打包成war包,再将war包放置到webapps目录下，war包会自动解压  </li></ul></li><li>1.配置conf/server.xml文件  </li><li>1.在conf\Catalina\localhost创建任意名称的xml文件，在文件中编写  </li></ul></li><li>1.静态项目和动态项目  <ul><li>1.目录结构  <ul><li>1.Java动态项目的目录结构  <ul><li>项目根目录  <ul><li>WEB-INF目录：  <ul><li>web.xml:web项目核心配置文件  </li><li>class目录：放置字节码文件  </li><li>lib目录：放置依赖的jar包  </li></ul></li></ul></li></ul></li></ul></li><li>将Tomcat集成到IDEA中，并且创建JavaEE的项目,部署项目  <ul><li>Run-&gt;Edit configurations-&gt;Templates-&gt;Tomcat server-&gt;Local  </li><li>配置Tomcat路径  </li><li><img src="!%5B%5D(http://ww1.sinaimg.cn/large/006VKolAly1g6dcz3t5ywj30lv043glj.jpg)" alt="如图">  </li><li>热部署：保证每次更新资源，Tomcat会自动启动</li><li><img src="!%5B%5D(http://ww1.sinaimg.cn/large/006VKolAly1g6dd6hai4nj30bc03ka9w.jpg)" alt>  </li><li></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web服务入门介绍&quot;&gt;&lt;a href=&quot;#Web服务入门介绍&quot; class=&quot;headerlink&quot; title=&quot;Web服务入门介绍&quot;&gt;&lt;/a&gt;Web服务入门介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;web相关概念回顾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web服务器
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
    
      <category term="servlet" scheme="https://Yogaguo.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://Yogaguo.github.io/2019/09/10/Demo/"/>
    <id>https://Yogaguo.github.io/2019/09/10/Demo/</id>
    <published>2019-09-10T10:29:12.393Z</published>
    <updated>2019-09-10T13:55:31.097Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Demo<br>date: 2019-09-10 18:29:12</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Demo&lt;br&gt;date: 2019-09-10 18:29:12&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;&lt;h3 id=&quot;测试
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
