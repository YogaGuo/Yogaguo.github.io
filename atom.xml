<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼儿的技术博客</title>
  
  <subtitle>走出生活舒适圈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Yogaguo.github.io/"/>
  <updated>2019-10-22T12:48:56.967Z</updated>
  <id>https://Yogaguo.github.io/</id>
  
  <author>
    <name>小鱼儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis初识</title>
    <link href="https://Yogaguo.github.io/2019/10/22/2019-10-23/"/>
    <id>https://Yogaguo.github.io/2019/10/22/2019-10-23/</id>
    <published>2019-10-22T09:48:40.000Z</published>
    <updated>2019-10-22T12:48:56.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul><li>概念：redis是一款高性能的NOSQL系列的非关系型数据库,redis内部是一个key-value存储系统。它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型，类似于Java中的map）。Redis基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一，也被人们称为数据结构服务器.</li></ul><h3 id="为什么用-Redis"><a href="#为什么用-Redis" class="headerlink" title="为什么用 Redis"></a>为什么用 Redis</h3><p>互联网时代背景下: </p><ul><li><p>当数据量的总大小一个机器放不下时。 </p></li><li><p>数据索引一个机器的内存放不下时。 </p></li><li><p>访问量（读写混合）一个实例放不下时</p></li><li><p>单机时代：</p><img src="/2019/10/22/2019-10-23/1.png"></li></ul><p>如果每次存储成千上万条数据，这样很会导致mysql的性能很差，存储以及读取速度很慢，然后就演变成缓存+mysql+垂直拆分的方式</p><img src="/2019/10/22/2019-10-23/2.png"><p>Cache作为中间缓存<br>将所有的数据先保存到缓存中，然后再存入mysql中，减小数据库压力，提高效率。<br>但是当数据再次增加到又一个量级，上面的方式也不能满足需求，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。Mysql的master-slave模式成为这个时候的网站标配了。</p><img src="/2019/10/22/2019-10-23/3.png"><p>主从分离模式<br>在redis的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用<strong>InnoDB引擎</strong>代替MyISAM。</p><h2 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a>Redis的优势</h2><ul><li><p>易扩展</p></li><li><p>大数据量提高性能</p></li><li><p>多样灵活的数据格式</p></li></ul><h2 id="Redia的安装与介绍"><a href="#Redia的安装与介绍" class="headerlink" title="Redia的安装与介绍"></a>Redia的安装与介绍</h2><ol><li><p>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></p></li><li><p>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></p></li><li><p>介绍：</p><ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端<h2 id="Redis的数据结构"><a href="#Redis的数据结构" class="headerlink" title="Redis的数据结构"></a>Redis的数据结构</h2>redis存储的是：key,value 格式的数据，其中 key 都是键值对；value 有5种不同的数据结构</li><li>value 的5种数据结构：</li><li>字符串类型 String</li><li>哈希类型 hash  map的格式</li><li>列表类型 list     linkedlist格式</li><li>集合类型   </li><li>有序集合类型  <h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2></li></ul></li></ol><ul><li><p>字符串操作</p><ul><li><p>存储：<code>set key value</code></p></li><li><p>获取：<code>get key</code></p></li><li><p>删除：<code>del key</code></p></li></ul></li><li><p>哈希类型</p><ul><li><p>存储：<code>hset key field value</code></p></li><li><p>获取：</p><p>​       <code>hget key field</code>:获取指定的field对应的值</p><p>​    <code>hgetall key</code> 获取所有的field和value</p></li><li><p>删除：<code>hdel key field</code></p></li></ul></li><li><p>列表类型：可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><ul><li>添加：<code>lpush key value</code>将元素加入列表左边；</li></ul></li></ul><p>​                          <code>rpush key value</code>将元素加入列表右边</p><p>​         获取：<code>lrange key start end</code>:范围获取</p><p>​         删除：<code>lpop key</code>: 删除列表左边的元素并将元素返回；<code>rpop key</code></p><ul><li><p>集合类型：不允许重复元素，元素无序</p><ul><li>存储：<code>sadd key value</code></li><li>获取：<code>smembers key</code>:获取 set 集合中所有的元素</li><li>删除：<code>srem key value</code>:删除集合中的某个元素</li></ul></li><li><p>有序集合：sortedset 不允许重复元素，元素有序,.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ul><li><p>存储：<code>zadd key score value</code></p></li><li><p>获取：<code>zrange key start end</code></p><pre class=" language-r"><code class="language-r"><span class="token number">1</span>. 存储：zadd key score value                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">60</span> zhangsan                <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">50</span> lisi                <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">80</span> wangwu                <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>            <span class="token number">2</span>. 获取：zrange key start end <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span>                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"lisi"</span>                <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>                <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span>                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span> withscores                <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>                <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"60"</span>                <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span>                <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"80"</span>                <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"lisi"</span>                <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"500"</span>            <span class="token number">3</span>. 删除：zrem key value                <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> zrem mysort lisi                <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre></li></ul></li><li><p>通用命令</p><ul><li><code>keys *</code>查询所有的键</li><li><code>type key</code>键值类型</li><li><code>del key</code>删除指定的键值对<h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2></li></ul><p>redis 是一个内存数据库，当Redis 服务器重启，或者电脑重启，数据多会丢失，可以将 redis 内存中的数据持久化到硬盘的文件中。</p></li><li><p>Redis 持久化的机制</p><ul><li><p>RDB:默认方式，在一定的间隔时间中，检测 key 的变化情况，然后持久化。</p><ul><li><p>1.具体操作：编辑 redis.windows.conf文件</p><pre class=" language-xml"><code class="language-xml">after 900 sec (15 min) if at least 1 key changed#   after 300 sec (5 min) if at least 10 keys changed#   after 60 sec if at least 10000 keys changed</code></pre></li></ul></li></ul></li></ul><pre><code>  ```xm  save 900 1  save 300 10  save 60  10000  ```- 重新启动redis服务器，并指定配置文件名称  D:\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf    </code></pre><ul><li>ADF:日志记录的方式，可以记录每一条命令的操作，在每一条命令后，持久化数据（不推荐）</li></ul><h2 id="Java-客户端-Jedis"><a href="#Java-客户端-Jedis" class="headerlink" title="Java 客户端 Jedis"></a>Java 客户端 Jedis</h2><ul><li>Jedis :一款java操作redis数据库的工具.<ul><li><ol><li>下载jedis的jar包<ul><li><ol start="2"><li>使用<ul><li><ol><li>获取连接<br><code>Jedis jedis = new Jedis(&quot;localhost&quot;,6379);</code></li></ol></li></ul></li></ol><ul><li><ol start="2"><li>操作<br><code>jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</code></li></ol></li><li><ol start="3"><li>关闭连接<br><code>jedis.close()</code></li></ol></li></ul></li></ul></li></ol></li></ul></li></ul><ul><li><p>2 .Jedis操作各种redis中的数据结构</p><ul><li><p>1.字符串类型 string</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//1. 获取连接</span>                Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span>                <span class="token comment" spellcheck="true">//2. 操作</span>                <span class="token comment" spellcheck="true">//存储</span>                jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取</span>                String username <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//可以使用setex()方法存储可以指定过期时间的 key value</span>                jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"activecode"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span>                <span class="token comment" spellcheck="true">//3. 关闭连接</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>哈希类型 hash ： map格式  </p><p>hset</p><p>hget<br>hgetAll</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取连接</span>               Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span>               <span class="token comment" spellcheck="true">//2. 操作</span>               <span class="token comment" spellcheck="true">// 存储hash</span>               jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"female"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获取hash</span>               String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul><pre><code>                   // 获取hash的所有map中的数据                   Map&lt;String, String&gt; user = jedis.hgetAll(&quot;user&quot;);                   // keyset                   Set&lt;String&gt; keySet = user.keySet();                   for (String key : keySet) {                       //获取value                       String value = user.get(key);                       System.out.println(key + &quot;:&quot; + value);                   }                   //3. 关闭连接                   jedis.close();   ```</code></pre><h2 id="Jdeis连接池"><a href="#Jdeis连接池" class="headerlink" title="Jdeis连接池"></a>Jdeis连接池</h2><ul><li><ol><li>创建JedisPool连接池对象</li></ol></li><li><ol start="2"><li><p>调用方法 getResource()方法获取Jedis连接</p><pre><code> ```java</code></pre><p>连接池工具类</p><pre><code>       public class JedisPoolUtils {           private static JedisPool jedisPool;           static{               //读取配置文件               InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;);               //创建Properties对象               Properties pro = new Properties();               //关联文件               try {                   pro.load(is);               } catch (IOException e) {                   e.printStackTrace();               }               //获取数据，设置到JedisPoolConfig中               JedisPoolConfig config = new JedisPoolConfig();               config.setMaxTotal(Integer.parseInt(pro.getProperty(&quot;maxTotal&quot;)));               config.setMaxIdle(Integer.parseInt(pro.getProperty(&quot;maxIdle&quot;)));               //初始化JedisPool               jedisPool = new JedisPool(config,pro.getProperty(&quot;host&quot;),Integer.parseInt(pro.getProperty(&quot;port&quot;)));</code></pre></li></ol></li></ul><pre><code>                }                /**                 * 获取连接方法                 */                public static Jedis getJedis(){                    return jedisPool.getResource();                }            }      ```</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：redis是一款高性能的NOSQL系列的非关系型数据库,redis内部是一个key-value存储
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://Yogaguo.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://Yogaguo.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Ajax与JSON</title>
    <link href="https://Yogaguo.github.io/2019/10/22/2019-10-22/"/>
    <id>https://Yogaguo.github.io/2019/10/22/2019-10-22/</id>
    <published>2019-10-22T07:20:51.000Z</published>
    <updated>2019-10-22T09:14:43.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX："><a href="#AJAX：" class="headerlink" title="AJAX："></a>AJAX：</h1><pre><code>1. 概念： ASynchronous JavaScript And XML    异步的JavaScript 和 XML    1. 异步和同步：客户端和服务器端相互通信的基础上        * 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。        * 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。        Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1]         通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。        传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。        提升用户的体验2. 实现方式：    1. 原生的JS实现方式（了解）                 //1.创建核心对象                var xmlhttp;                if (window.XMLHttpRequest)                {// code for IE7+, Firefox, Chrome, Opera, Safari                    xmlhttp=new XMLHttpRequest();                }                else                {// code for IE6, IE5                    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);                }                //2. 建立连接                /*                    参数：                        1. 请求方式：GET、POST                            * get方式，请求参数在URL后边拼接。send方法为空参                            * post方式，请求参数在send方法中定义                        2. 请求的URL：                        3. 同步或异步请求：true（异步）或 false（同步）                 */                xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);                //3.发送请求                xmlhttp.send();                //4.接受并处理来自服务器的响应结果                //获取方式 ：xmlhttp.responseText                //什么时候获取？当服务器响应成功后再获取                //当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。                xmlhttp.onreadystatechange=function()                {                    //判断readyState就绪状态是否为4，判断status响应状态码是否为200                    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)                    {                       //获取服务器的响应结果                        var responseText = xmlhttp.responseText;                        alert(responseText);                    }                }    2. JQeury实现方式        1. $.ajax()            * 语法：$.ajax({键值对});             //使用$.ajax()发送异步请求                $.ajax({                    url:&quot;ajaxServlet1111&quot; , // 请求路径                    type:&quot;POST&quot; , //请求方式                    //data: &quot;username=jack&amp;age=23&quot;,//请求参数                    data:{&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23},                    success:function (data) {                        alert(data);                    },//响应成功后的回调函数                    error:function () {                        alert(&quot;出错啦...&quot;)                    },//表示如果请求响应出现错误，会执行的回调函数                    dataType:&quot;text&quot;//设置接受到的响应数据的格式                });        2. $.get()：发送get请求            * 语法：$.get(url, [data], [callback], [type])                * 参数：                    * url：请求路径                    * data：请求参数                    * callback：回调函数                    * type：响应结果的类型        3. $.post()：发送post请求            * 语法：$.post(url, [data], [callback], [type])                * 参数：                    * url：请求路径                    * data：请求参数                    * callback：回调函数                    * type：响应结果的类型</code></pre><h1 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h1><pre><code>1. 概念： JavaScript Object Notation        JavaScript对象表示法    Person p = new Person();    p.setName(&quot;张三&quot;);    p.setAge(23);    p.setGender(&quot;男&quot;);    var p = {&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;};    * json现在多用于存储和交换文本信息的语法    * 进行数据的传输    * JSON 比 XML 更小、更快，更易解析。2. 语法：    1. 基本规则        * 数据在名称/值对中：json数据是由键值对构成的            * 键用引号(单双都行)引起来，也可以不使用引号            * 值得取值类型：                1. 数字（整数或浮点数）                2. 字符串（在双引号中）                3. 逻辑值（true 或 false）                4. 数组（在方括号中）    {&quot;persons&quot;:[{},{}]}                5. 对象（在花括号中） {&quot;address&quot;:{&quot;province&quot;：&quot;陕西&quot;....}}                6. null        * 数据由逗号分隔：多个键值对由逗号分隔        * 花括号保存对象：使用{}定义json 格式        * 方括号保存数组：[]    2. 获取数据:        1. json对象.键名        2. json对象[&quot;键名&quot;]        3. 数组对象[索引]        4. 遍历                 //1.定义基本格式                var person = {&quot;name&quot;: &quot;张三&quot;, age: 23, &#39;gender&#39;: true};                var ps = [{&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true},                    {&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true},                    {&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false}];</code></pre><p>​<br>​<br>​<br>                    //获取person对象中所有的键和值<br>                    //for in 循环<br>                   /* for(var key in person){<br>                        //这样的方式获取不行。因为相当于  person.”name”<br>                        //alert(key + “:” + person.key);<br>                        alert(key+”:”+person[key]);<br>                    }*/</p><pre><code>               //获取ps中的所有值                for (var i = 0; i &lt; ps.length; i++) {                    var p = ps[i];                    for(var key in p){                        alert(key+&quot;:&quot;+p[key]);                    }                }</code></pre><pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token punctuation">.</span> JSON数据和Java对象的相互转换    <span class="token operator">*</span> JSON解析器：        <span class="token operator">*</span> 常见的解析器：Jsonlib，Gson，fastjson，jackson    <span class="token number">1</span><span class="token punctuation">.</span> JSON转为Java对象        <span class="token number">1</span><span class="token punctuation">.</span> 导入jackson的相关jar包        <span class="token number">2</span><span class="token punctuation">.</span> 创建Jackson核心对象 ObjectMapper        <span class="token number">3</span><span class="token punctuation">.</span> 调用ObjectMapper的相关方法进行转换            <span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">readValue</span><span class="token punctuation">(</span>json字符串数据<span class="token punctuation">,</span>Class<span class="token punctuation">)</span>    <span class="token number">2</span><span class="token punctuation">.</span> Java对象转换JSON        <span class="token number">1</span><span class="token punctuation">.</span> 使用步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 导入jackson的相关jar包            <span class="token number">2</span><span class="token punctuation">.</span> 创建Jackson核心对象 ObjectMapper            <span class="token number">3</span><span class="token punctuation">.</span> 调用ObjectMapper的相关方法进行转换                <span class="token number">1</span><span class="token punctuation">.</span> 转换方法：                    <span class="token operator">*</span> <span class="token function">writeValue</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，obj<span class="token punctuation">)</span><span class="token operator">:</span>                        参数<span class="token number">1</span>：                            File：将obj对象转换为JSON字符串，并保存到指定的文件中                            Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中                            OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中                    <span class="token operator">*</span> <span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">:</span>将对象转为json字符串                <span class="token number">2</span><span class="token punctuation">.</span> 注解：                    <span class="token number">1</span><span class="token punctuation">.</span> <span class="token annotation punctuation">@JsonIgnore</span>：排除属性。                    <span class="token number">2</span><span class="token punctuation">.</span> <span class="token annotation punctuation">@JsonFormat</span>：属性值得格式化                        <span class="token operator">*</span> <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>                <span class="token number">3</span><span class="token punctuation">.</span> 复杂java对象转换                    <span class="token number">1</span><span class="token punctuation">.</span> List：数组                    <span class="token number">2</span><span class="token punctuation">.</span> Map：对象格式一致</code></pre><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 校验用户名是否存在    <span class="token number">1</span><span class="token punctuation">.</span> 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：        <span class="token number">1</span><span class="token punctuation">.</span> $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token operator">:</span>将最后一个参数type指定为<span class="token string">"json"</span>        <span class="token number">2</span><span class="token punctuation">.</span> 在服务器端设置MIME类型            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX：&quot;&gt;&lt;a href=&quot;#AJAX：&quot; class=&quot;headerlink&quot; title=&quot;AJAX：&quot;&gt;&lt;/a&gt;AJAX：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. 概念： ASynchronous JavaScript And XML    异步的JavaS
      
    
    </summary>
    
    
    
      <category term="AJAX" scheme="https://Yogaguo.github.io/tags/AJAX/"/>
    
      <category term="JSON" scheme="https://Yogaguo.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>2019-10-17</title>
    <link href="https://Yogaguo.github.io/2019/10/17/2019-10-17/"/>
    <id>https://Yogaguo.github.io/2019/10/17/2019-10-17/</id>
    <published>2019-10-17T13:43:04.000Z</published>
    <updated>2019-10-17T14:00:54.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载机制顺序及具体细节"><a href="#类加载机制顺序及具体细节" class="headerlink" title="类加载机制顺序及具体细节"></a>类加载机制顺序及具体细节</h2><p>首先知道，类从被加载到虚拟机内存中开始，到卸载出内存，整个生命周期包括：加载 (Loading)  验证（Verification）</p><p>准备（Preparation）解析（Resolution）初始化（Initialization）使用（Using）卸载（Unloading;</p><p>其中 验证 准备 解析 统称为 链接（Linking)</p><h3 id="什么时候进行初始化"><a href="#什么时候进行初始化" class="headerlink" title="什么时候进行初始化"></a>什么时候进行初始化</h3><ul><li>1.遇到 new getstatic  等 4条字节码指令时，如果类没有进行初始化，则先初始化。</li><li>2.使用<strong>反射调用</strong>时。</li><li>3.父类还没有进行初始化时，先触发父类初始化</li><li>4.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类加载机制顺序及具体细节&quot;&gt;&lt;a href=&quot;#类加载机制顺序及具体细节&quot; class=&quot;headerlink&quot; title=&quot;类加载机制顺序及具体细节&quot;&gt;&lt;/a&gt;类加载机制顺序及具体细节&lt;/h2&gt;&lt;p&gt;首先知道，类从被加载到虚拟机内存中开始，到卸载出内存，整个生
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法总结</title>
    <link href="https://Yogaguo.github.io/2019/10/16/2019-10-16/"/>
    <id>https://Yogaguo.github.io/2019/10/16/2019-10-16/</id>
    <published>2019-10-16T11:05:04.000Z</published>
    <updated>2019-10-16T12:11:13.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板方法定义"><a href="#模板方法定义" class="headerlink" title="模板方法定义"></a>模板方法定义</h3><p><strong>模板方法模式(template method pattern</strong>:定义一个操作中的某种算法的框架，而将一些步骤延迟到子类中。</p><p>模板方法模式使得子类在不改变一个算法结构的前提下，对这些步骤进行一些特定化的定义。</p><h3 id="模板方法的程序组成架构"><a href="#模板方法的程序组成架构" class="headerlink" title="模板方法的程序组成架构"></a>模板方法的程序组成架构</h3><p>   在模板方法模式中，存在一个父类（也可以是父接口），其中包括两类方法：模板放法和步骤方法。</p><h4 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h4><p>实现某种算法的方法步骤。而这些步骤都是调用的步骤方法完成的。注意，子类不要重写，为了防止，定义为 <strong>final</strong></p><h4 id="步骤方法"><a href="#步骤方法" class="headerlink" title="步骤方法"></a>步骤方法</h4><p>完成模板方法的每个阶段性方法。每个步骤方法完成某一特定的  完成总算法的一部分功能</p><p>步骤方法有三种类型：抽象方法    最终方法   钩子方法</p><h5 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h5><p>要求子类必须要实现的方法，是完成模板方法的算法步骤中必须由子类完成的个性化定义</p><h5 id="最终方法"><a href="#最终方法" class="headerlink" title="最终方法"></a>最终方法</h5><p>子类不能重写的方法，是：若要完成模板方法的算法步骤，对于所有子类执行都一样的步骤</p><h5 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h5><p>是父类给的<strong>默认实现</strong>，子类可以重写，通常在父类中给出的是一个<strong>空实现</strong>，并以该空实现作为方法的默认实现，钩子方法</p><p>也可以提供一个非空的的默认实现</p><h3 id="具体案例展示"><a href="#具体案例展示" class="headerlink" title="具体案例展示"></a>具体案例展示</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Dome<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token keyword">class</span> <span class="token class-name">Shopping</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子类不能重写的方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子类必须实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//钩子方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用微信支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShoesShopping</span> <span class="token keyword">extends</span> <span class="token class-name">Shopping</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"购买运动鞋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ClothesShopping</span> <span class="token keyword">extends</span> <span class="token class-name">Shopping</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"购买衣服"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用支付宝支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Dome<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Shopping shoes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoesShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shoes<span class="token punctuation">.</span><span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shopping clothes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClothesShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clothes<span class="token punctuation">.</span><span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>用户登录购买运动鞋使用微信支付==================用户登录购买衣服使用支付宝支付</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>  在 JDK 的集合源码中 ArrayList 就是用了模板方法模式设计的。 ArrayList继承自 AbstractList 抽象类 ，而 AbstractList </p><p>  有继承自 AbstractCollection </p><img src="/2019/10/16/2019-10-16/1.PNG">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模板方法定义&quot;&gt;&lt;a href=&quot;#模板方法定义&quot; class=&quot;headerlink&quot; title=&quot;模板方法定义&quot;&gt;&lt;/a&gt;模板方法定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;模板方法模式(template method pattern&lt;/strong&gt;:定义一个操作
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://Yogaguo.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="模板方法" scheme="https://Yogaguo.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://Yogaguo.github.io/2019/10/06/Test/"/>
    <id>https://Yogaguo.github.io/2019/10/06/Test/</id>
    <published>2019-10-06T05:15:50.000Z</published>
    <updated>2019-10-06T05:15:50.805Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JVM内存模型与GC算法策略</title>
    <link href="https://Yogaguo.github.io/2019/09/29/Demo2019-9-29/"/>
    <id>https://Yogaguo.github.io/2019/09/29/Demo2019-9-29/</id>
    <published>2019-09-29T08:09:57.000Z</published>
    <updated>2019-10-04T11:38:59.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM-Run-Time-Data-Area-运行时数据区"><a href="#JVM-Run-Time-Data-Area-运行时数据区" class="headerlink" title="JVM Run-Time Data Area 运行时数据区"></a>JVM Run-Time Data Area 运行时数据区</h2><p>在学习后文，先展示 JVM RunTime Data Area大致布局图和JVM Stacks图</p> <img src="/2019/09/29/Demo2019-9-29/07.png"> <img src="/2019/09/29/Demo2019-9-29/08.png"><h3 id="JVM-Stacks-Java虚拟机栈"><a href="#JVM-Stacks-Java虚拟机栈" class="headerlink" title="JVM Stacks   Java虚拟机栈"></a>JVM Stacks   Java虚拟机栈</h3><p>首先要知道，栈是操作系统内核为某个进程或者线程建立的存储区域，它保存着一个线程中的方法的调用状态，它</p><p>具有先进后出的特性。在栈中的数据大小与生命周期都是<strong>确定</strong>的，在方法执行完成后退出栈后，它的生命周期也就</p><p>结束了。</p><p>Java虚拟机栈是JVM建立的，根据《深入理解Java虚拟机》，JVMS(虚拟机栈)是<strong>线程私有的</strong>。它的生命周期与线程相同</p><p><strong>注意：Java中每个方法对应一个Frame(栈帧)</strong>，每个Frame中都有Local Variables(局部变量表)，Operand Satcks(操作数栈)，Dynamic Linking(动态链接),Return Address(方法出口)。每一个方法从调用到到执行完毕，就是一个Frame在JVMS</p><p>中入栈到出栈的过程。</p><h4 id="图解Frame中方法的一次执行过程"><a href="#图解Frame中方法的一次执行过程" class="headerlink" title="图解Frame中方法的一次执行过程"></a>图解Frame中方法的一次执行过程</h4><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这一段代码发生什么？</p><p>首先看Frame中Local Variables和Operand Stack的指令图</p> <img src="/2019/09/29/Demo2019-9-29/01.png"><img src="/2019/09/29/Demo2019-9-29/02.png"><ul><li><p>由图看出 main线程栈中经历了 ：</p><ul><li><p>1.指令 ipush 把100 压如<strong>操作数栈</strong>，istore 1 把栈顶元素放到<strong>局部变量表</strong>中索引为 1 的区域，注意：局部变量表有两个参数，<strong>args 和 i</strong></p><img src="/2019/09/29/Demo2019-9-29/03.png"></li></ul></li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> c<span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>还是首先看Frame中Local Variables和Operand Stack的指令图</p><img src="/2019/09/29/Demo2019-9-29/04.png"><img src="/2019/09/29/Demo2019-9-29/05.png"><ul><li><p>add 线程栈经历了：</p><ul><li><p>1.指令 iload1 iload2 把提前已经在 a 和 b 的值从 操作数栈中放到 <strong>局部变量表中</strong>中索引为 1  2的区域，iadd 把a和b相加放到局部变量表的栈顶 ，istore3 把 7 弹出放到 c 中 return 结束</p><img src="/2019/09/29/Demo2019-9-29/06.png"></li></ul></li></ul><h3 id="PC-Register-程序计数器"><a href="#PC-Register-程序计数器" class="headerlink" title="PC Register 程序计数器"></a>PC Register 程序计数器</h3><p>程序计数器是一块小的内存空间，它的功能：<strong>记录当前线程执行地址</strong>，<strong>每一个线程都有一个PC 寄存器，即它为线程私有</strong>。</p><ul><li><p>为什么需要PC计数器：</p><ul><li>Java虚拟机的多线程是通过<strong>线程轮流切换</strong>并分配处理器执行时间实现的。因此，为了<strong>线程切换后能恢复到正确的执行位置</strong>，每个线程都需要一个独立的PC计数器。</li></ul></li></ul><h3 id="Native-Method-Area本地方法栈"><a href="#Native-Method-Area本地方法栈" class="headerlink" title="Native Method Area本地方法栈"></a>Native Method Area本地方法栈</h3><p>用来调用其他语言的本地方法，比如C / C++ 写得本地代码，这些方法在本地方法栈执行，而不会再Java栈中执行。<strong>它也是线程私有的</strong>。</p><h3 id="Java-Head"><a href="#Java-Head" class="headerlink" title="Java Head"></a>Java Head</h3><p>Java虚拟机管理的内存中最大的一块，<strong>是所有线程共享的</strong>，几乎所有的对象实例都在这里分配。（有些小的对象有可能不在这分配，后面再说）。Java堆是垃圾收集器管理的主要区域。从内存回收角度看：现在的收集器基本都采用<strong>分代收集算法</strong>，所以Java堆还可以被分为：新生代和老年代：在细致-&gt; Eden区  两个Survivor区（1:1） Tenured(终身区)，关于垃圾回收，随后说。</p><h3 id="Method-Area-方法区"><a href="#Method-Area-方法区" class="headerlink" title="Method Area 方法区"></a>Method Area 方法区</h3><p>与Java堆一样，是<strong>线程共享的</strong>，用于存储已被Java虚拟机加载的类信息   常量   静态变量   编译器编译后的代码。JVM运行时，类加载器子系统将会提取 class 文件里的类信息，并将其放到Method Area中，</p><h4 id="RunTime-Constant-Pool-运行时常量池"><a href="#RunTime-Constant-Pool-运行时常量池" class="headerlink" title="RunTime Constant Pool 运行时常量池"></a>RunTime Constant Pool 运行时常量池</h4><p>Method Area中的一部分，用于存放编译期生成的各种字面量和符号引用。除了保存 Class 文件中描述的符号引用外，还会把翻译出来的<strong>直接引用</strong>也存储在运行时的常量池中。关于运行时常量池的详解。在学习完类加载顺序后再说明。</p><h2 id="GC算法分配策略"><a href="#GC算法分配策略" class="headerlink" title="GC算法分配策略"></a>GC算法分配策略</h2><p>首先看一张Heap中从内存回收角度的分布图：</p><img src="/2019/09/29/Demo2019-9-29/09.png"><p>现在来解释：</p><ul><li><p>首先 eden 区和 Survivor区比例为 8：1:1，至于为何，应该是经过多次试验，这样分配最好吧，后期可以调参，新生代产生的垃圾比较多，Old 老年代产生的相对少。所以新生代多使用 Copying 复制垃圾回收算法。老年代多使用 Mark Compact 标记整理算法。至于为何。看下文！</p><h3 id="GC-过程"><a href="#GC-过程" class="headerlink" title="GC 过程"></a>GC 过程</h3></li><li><p>当 new 了一个对象。如果JVM检测到它<strong>“ 很大 ”</strong>，何为大对象：需要大量连续内存空间的Java对象，最典型的就是很长的字符串以及数组，它们会被直接<strong>放到Old老年代</strong>。</p></li><li><p>在正常的情况下：</p><ul><li><p>对象<strong>优先先放到Eden</strong>,如果不需要它了，GC，如果发现有的引用还指向它。把这个对象 Copy 到Survivor区中的S0  S1中的一个，比如S0</p></li><li><p>GC开始 如果发现S0中这个对象不存在了，直接回收，如果依然存在，在 Copy 到 S1 中</p></li><li><p>在来一次 GC ,发现它在 S1 中还存在(需要生存),又 Copy 到 S0 中，循环往复 <strong>15次</strong>，发现对象一直存在，直接放到<strong>Old</strong>区。</p></li></ul></li></ul><h3 id="什么是-垃圾对象（如何确定它）"><a href="#什么是-垃圾对象（如何确定它）" class="headerlink" title="什么是 垃圾对象（如何确定它）"></a>什么是 垃圾对象（如何确定它）</h3><p>一句话，未来不会再被用的对象，如何确定它？</p><ul><li><p>引用计数：</p><p>对象会有一个<strong>对象头</strong>，有一个引用计数器，默认为 0 ，来一个引用，计数器加 1 ，当引用失效，计数器就减 1 ，当减为 0 时，为 垃圾 ——&gt;GC;</p><ul><li>缺点：很明显，它很容易因为对象之间相互循环引用，最终造成<strong>Memory Leak</strong>.</li></ul></li><li><p>Root Searching 根搜索 正向可达</p><ul><li><p>Searching from the roots instance</p></li><li><p>Which instance is roots instance?</p></li></ul></li></ul><p>​              JVM Stacks引用的对象     Native Method Stacks 引用的对象      RunTime Constant Pool 常量池中引用引用的对象   Static reference in method area 引用的对象</p><ul><li><p>实现：</p><p>根据这些跟对象传出的引用去找，看有什么对象可以找到，能找到(可达）的都不是垃圾，反之是垃圾</p></li></ul><h3 id="如何清除垃圾"><a href="#如何清除垃圾" class="headerlink" title="如何清除垃圾"></a>如何清除垃圾</h3><ul><li><p>1.Mark-Sweep 标记-清除：</p><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><ul><li>它很简单，但是有两点不足：一是<strong>效率不高，二是带来了内存碎片化问题</strong></li></ul></li><li><p>2.Copying 复制算法</p><p>  事先准备两块大小相等的内存，每次只使用一块，当这一块使用完了，将还存活的对象<strong>复制</strong>到另一块中，在清除已使用过的内存空间。很明显，<strong>内存浪费</strong>。</p></li><li><p>3.Mark-Compact 标记-整理</p><img src="/2019/09/29/Demo2019-9-29/10.png"><p>标记过程与 “ 标记 清除” 一样，但后续中：让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h2 id="再谈Java对象的分配"><a href="#再谈Java对象的分配" class="headerlink" title="再谈Java对象的分配"></a>再谈Java对象的分配</h2></li><li><p>1.一个小的对象，在JDK1.8之后，会首先放到栈上</p></li></ul><p><strong>放到栈上的对象具备以下特征：1.线程私有化的  2.无逃逸（一个对象只有这个这个方法用，其他方法没有用）3.支持标量替换</strong>。</p><p>栈上分配的好处：<strong>自动回收（弹栈）</strong>。</p><ul><li>2.栈上不能分配了，或者它逃逸了，那么会被<strong>分配到线程本地TLAB(位于堆的Eden区，占用Eden的 1% 的空间)，它的优点在于：多线程下，小对象不用竞争eden区就可以申请空间，提高了效率。</strong></li><li>3.看是否是 大对象，是的话，直接 Old 老年代。</li><li>4.不是，进入Eden</li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JVM-Run-Time-Data-Area-运行时数据区&quot;&gt;&lt;a href=&quot;#JVM-Run-Time-Data-Area-运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;JVM Run-Time Data Area 运行时数据区&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://Yogaguo.github.io/categories/JVM/"/>
    
    
      <category term="JVM内存模型" scheme="https://Yogaguo.github.io/tags/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="GC" scheme="https://Yogaguo.github.io/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>JSP与Session初学</title>
    <link href="https://Yogaguo.github.io/2019/09/21/Demo2019-9-21/"/>
    <id>https://Yogaguo.github.io/2019/09/21/Demo2019-9-21/</id>
    <published>2019-09-21T09:40:14.000Z</published>
    <updated>2019-10-04T11:38:59.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP入门："><a href="#JSP入门：" class="headerlink" title="JSP入门："></a>JSP入门：</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>1.Java Server Pages:Java服务器端页面，可以理解为：一个特殊的页面，其中即可以指定html标签，又可以定义java代码，它的作用就是为了<strong>简化书写</strong></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p><strong>JSP本质就是Servlet</strong>,在之前的Servlet中，输出页面标签是由我们自己完成，而在JSP中，它的源码中已经帮我们提前做了html标签的输出</p><p><code>out.write(&quot;标签语句&quot;)</code></p></li></ul><h3 id="JSP的脚本"><a href="#JSP的脚本" class="headerlink" title="JSP的脚本"></a>JSP的脚本</h3><ul><li><p>JSP的脚本就是：JSP定义Java代码的方式</p><p>如：</p></li></ul><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span><span class="token operator">%</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token operator">></span></code></pre><h4 id="脚本学习"><a href="#脚本学习" class="headerlink" title="脚本学习"></a>脚本学习</h4><ul><li><p>1.<code>&lt;% 代码    %&gt;</code></p><p>​       它定义的Java代码在转换成.Java文件中的service()方法中，<strong>它可以定义servlet()方法中定义的一切</strong></p></li><li><p>2.<code>&lt;%！代码 %&gt;</code></p><p>​        它定义的Java代码，在JSP转化后的Java类中的成员位置中（也就是说可以定义成员变量，成员方法，静态代码块。。。），但是它<strong>用的比较少</strong>，因为之前说过，在Servlet中，尽量不要定义成员变量等等，因为可能引发<strong>线程安全</strong>的问题</p><ul><li>3.<code>&lt;%= 代码 %&gt;</code></li></ul></li></ul><p>​               它定义的Java代码会输出到页面上。也就是说，Java输出语句中可以定义什么，该脚本就可以定义什么  </p><h3 id="JSP的内置对象"><a href="#JSP的内置对象" class="headerlink" title="JSP的内置对象"></a>JSP的内置对象</h3><ul><li><p>概念：在JSP页面中不需要获取和创建，可以直接使用的对象</p></li><li><p>JSP共有<strong>9</strong>个内置对象 </p></li><li><p>先说三个：</p><ul><li>1.Request</li><li>2.Response</li><li>3.out:字符输出流对象，可以将数据输出到页面上，和response.getWrite()类似</li><li>response.getWrite()和out.write的区别：<ul><li>在Tomcat服务器真正给客户端浏览器做出响应之前，会先找response缓冲区的数据，找到后拼到响应体中，在找out缓冲区数据，所以，<strong>response.getWrite()数据输出永远都在out.write()之前</strong></li></ul></li></ul></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器的对象中。（HttpSession）</li></ul><h3 id="入门学习"><a href="#入门学习" class="headerlink" title="入门学习"></a>入门学习</h3><ul><li><p>1.HttpSession域对象：</p><p><code>HttpSession session = request.getSession()</code> </p></li></ul><ul><li>2.使用HttpSession对象</li></ul><pre class=" language-java"><code class="language-java">Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span></code></pre><h3 id="Session的原理："><a href="#Session的原理：" class="headerlink" title="Session的原理："></a>Session的原理：</h3><p><strong>Session的实现是依赖于Cookie的</strong></p><img src="/2019/09/21/Demo2019-9-21/session.png"> <h3 id="Session细节"><a href="#Session细节" class="headerlink" title="Session细节"></a>Session细节</h3><ul><li><p>1.当客户端关闭后，服务器不关闭，两次获取的session不是<strong>同一个</strong></p><p>​    默认情况下，当客户端浏览器关闭后，即一次会话结束，那么获取不到对应的cookie头</p><p>   如果需要session相同，可以创建Cookie，键为JSESSIONID,设置最大存活时间，让cookie持久化保存</p><pre class=" language-java"><code class="language-java">       Cookie c<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>2.客户端不关闭，服务器关闭后，两次获取的session<strong>不是同一个</strong></p><p>​     服务器关闭，内存中创建的session对象就会被销毁，下一次只会创建新的session对象，但是，虽然对象不是同一个，但是要<strong>确保数据不丢失</strong></p><ul><li><p>1.session的钝化：在服务器正常关闭之前，将session对象<strong>序列化</strong>到硬盘上</p></li><li><p>2.session的活化;在服务器启动后，将session文件转化为内存中的session对象</p><p>注意：<strong>本地的Tmocat会自动完成session对象的序列化和反序列化，而IDEA不会，它只会将sesion对象序列化</strong></p></li></ul></li><li><p>3.session的失效时间</p><ul><li><p>1.服务器关闭</p></li><li><ol start="2"><li>session对象调用invalidate(),自杀</li></ol></li><li><ol start="3"><li><p>session对象默认失效时间   30min，可以选择性的修改</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul></li></ul><h3 id="Session的特点"><a href="#Session的特点" class="headerlink" title="Session的特点"></a>Session的特点</h3><ul><li><p>1.session是用于存储一次会话的多次请求的数据，存在于服务器端</p></li><li><p>2.session可以存储任意类型，任意大小的数据</p></li></ul><h3 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h3><ul><li><p>1.session存储数据在服务器端，cookie在客户端</p></li><li><p>2.session没有数据大小限制，cookie有</p></li><li><p>3.session数据安全（服务器端相对安全），cookie相对不安全</p></li></ul><h3 id="session案例"><a href="#session案例" class="headerlink" title="session案例"></a>session案例</h3><ul><li><p>1.案例需求：</p><ul><li><p>1.访问带有验证码的登录页面login.jsp</p></li><li><p>2.用户输入用户名，密码以及验证码</p><ul><li><p>如果用户名和密码错误，跳转到登录页面，提示：用户名或密码错误</p></li><li><p>如果验证码输入有误，跳转到登录页面，提示：验证码错误</p></li><li><p>都正确，跳转到主页success.jsp,显示：用户名   欢迎您</p></li></ul></li></ul></li></ul><h4 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Case<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/checkcode"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckCodeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.创建一对象，在内存中图片(验证码图片对象)</span>        BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.美化图片</span>        <span class="token comment" spellcheck="true">//2.1 填充背景色</span>        Graphics g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画笔对象</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置画笔颜色</span>        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.2画边框</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成随机角标</span>        Random ran <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取字符</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机字符</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.3写验证码</span>            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>width<span class="token operator">/</span><span class="token number">5</span><span class="token operator">*</span>i<span class="token punctuation">,</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String checkCode_session <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将验证码存入session</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"checkCode_session"</span><span class="token punctuation">,</span>checkCode_session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机生成坐标点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.将图片输出到页面展示</span>        ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Case<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.设置request编码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取参数</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String checkCode <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"checkCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.先获取生成的验证码</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String checkCode_session <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"checkCode_session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除session中存储的验证码</span>        session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"checkCode_session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.先判断验证码是否正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>checkCode_session<span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> checkCode_session<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>checkCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//忽略大小写比较</span>            <span class="token comment" spellcheck="true">//验证码正确</span>            <span class="token comment" spellcheck="true">//判断用户名和密码是否一致,需要调用UserDao查询数据库</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//登录成功</span>                <span class="token comment" spellcheck="true">//存储信息，用户信息</span>                session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//重定向到success.jsp</span>                response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//登录失败</span>                <span class="token comment" spellcheck="true">//存储提示信息到request</span>                request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"login_error"</span><span class="token punctuation">,</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转发到登录页面</span>                request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//验证码不一致</span>            <span class="token comment" spellcheck="true">//存储提示信息到request</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"cc_error"</span><span class="token punctuation">,</span><span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转发到登录页面</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>  Created by IntelliJ IDEA<span class="token punctuation">.</span>  User<span class="token operator">:</span> LENOVO  Date<span class="token operator">:</span> <span class="token number">2019</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">24</span>  Time<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">42</span>  To change <span class="token keyword">this</span> template use File <span class="token operator">|</span> Settings <span class="token operator">|</span> File Templates<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>login<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"/cookie&amp;session/checkcode?time="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>        div<span class="token punctuation">{</span>            color<span class="token operator">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/cookie&amp;session/loginServlet"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span>用户名<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span>密码<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span>验证码<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"checkCode"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span>img id<span class="token operator">=</span><span class="token string">"img"</span> src<span class="token operator">=</span><span class="token string">"/cookie&amp;session/checkcode"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登录"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"cc_error"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"cc_error"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"login_error"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"login_error"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="登录成功页面"><a href="#登录成功页面" class="headerlink" title="登录成功页面"></a>登录成功页面</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，欢迎您！"</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSP入门：&quot;&gt;&lt;a href=&quot;#JSP入门：&quot; class=&quot;headerlink&quot; title=&quot;JSP入门：&quot;&gt;&lt;/a&gt;JSP入门：&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Session" scheme="https://Yogaguo.github.io/categories/Session/"/>
    
    
      <category term="JSP" scheme="https://Yogaguo.github.io/tags/JSP/"/>
    
      <category term="Session" scheme="https://Yogaguo.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Cookie会话技术的学习笔记</title>
    <link href="https://Yogaguo.github.io/2019/09/18/Demo2019-9-18/"/>
    <id>https://Yogaguo.github.io/2019/09/18/Demo2019-9-18/</id>
    <published>2019-09-18T08:41:58.000Z</published>
    <updated>2019-10-04T11:38:59.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><ul><li><p>1.会话： <strong>一次会话</strong>中包含多次请求和响应。   </p><ul><li><p>1.一次会话: 浏览器第一次给服务器资源发送请求，会话建立，访问服务器，直到有一方断开为止。</p></li><li><p>作用：<strong>在一次会话的范围内的多次请求间共享数据</strong>(HTTP是无状态的，每一次建立的请求和响应都是独立的，即不和其他请求响应进行交互，会话技术则解决了此问题)  </p></li><li><p>方式：  </p><ul><li><p>1.客户端会话技术：Cookie  </p></li><li><p>2.服务器端会话技术：Session </p></li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h3></li><li><ol><li>概念：客户端会话技术，将数据保存到客户端  </li></ol></li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li><p>1.使用步骤：  </p><ul><li><p>1.创建Cookie对象，绑定数据 </p><p><code>new Cookie(String name,String value)</code></p></li><li><p>2.客户端发送Cookie对象 给浏览器 </p><p><code>response.addCookie(Cookie cookie)</code></p></li><li><p>3.获取Cookie，服务器拿到数据</p><p><code>Cookie[] request.getCookie()</code></p></li></ul></li></ul><h4 id="Cookie实现原理"><a href="#Cookie实现原理" class="headerlink" title="Cookie实现原理"></a>Cookie实现原理</h4><p>基于响应头set-cookie和请求头cookie实现</p><img src="/2019/09/18/Demo2019-9-18/cookie.png"><h4 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h4><ul><li>1.一次可不可以发送多个cookie?</li><li>可以，创建多个Cookie对象，发送多个键值对的数据</li></ul><h5 id="cookie在浏览器保存多长时间？"><a href="#cookie在浏览器保存多长时间？" class="headerlink" title="cookie在浏览器保存多长时间？"></a>cookie在浏览器保存多长时间？</h5><ul><li><p>1.默认情况下，当浏览器被关闭，Cookie数据被销毁（默认情况：Cookie存于浏览器内存）</p></li><li><p>2.设置Cookie生命周期，让它持久化存储：</p><p><code>setMaxAge(int seconds)</code></p><ul><li>1.正数：将Cookie数据写到硬盘中，持久化存储，也代表Cookie的存活时间</li><li>2.负数（默认值）</li><li>3.零：代表删除Cookie信息</li></ul></li></ul><h5 id="cookie可以存中文？"><a href="#cookie可以存中文？" class="headerlink" title="cookie可以存中文？"></a>cookie可以存中文？</h5><ul><li>在Tomcat 8 之前，Cookie不能直接存储中文数据</li><li>在Tomcat 8 之后，支持中文,但是，对于一些特殊字符还是不支持，用URL编码存储，URL解码</li></ul><h5 id="cookie获取范围有多大？"><a href="#cookie获取范围有多大？" class="headerlink" title="cookie获取范围有多大？"></a>cookie获取范围有多大？</h5><ul><li><p>假设在一个Tmocat服务器中，部署了多个web项目，这些web项目中cookie能不能共享</p><ul><li><p><strong>默认情况下，cookie不能共享</strong></p></li><li><p><code>setPath(String path)  //设置cookie的获取范围，默认下，设置当前的虚拟目录</code></p></li><li><p>如果要共享</p><p><code>setPath(&quot;/&quot;)</code></p></li></ul></li></ul><h5 id="不同的tomcat服务器间cookie的共享问题："><a href="#不同的tomcat服务器间cookie的共享问题：" class="headerlink" title="不同的tomcat服务器间cookie的共享问题："></a>不同的tomcat服务器间cookie的共享问题：</h5><p><code>setDomain(String path)</code> </p><p>如果设置<strong>一级域名</strong>相同，那么多个服务器之间cookie共享</p><p><code>setDomain(&quot;.baidu.com&quot;)</code>,那么，tieba.baidu.com和news.baidu.com中的cookie就可以共享</p><h4 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li><p>1.Cookie存储数据在客户端浏览器</p></li><li><p>2.浏览器对单个cookie的大小有限制，以及，对同一个域名下的总cookie数量也有限制(20个)</p></li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li><ol><li>cookie一般用于存储少量不太敏感的数据</li><li><strong>在不登录的情况下，来完成服务器对客户端的身份识别</strong></li></ol></li></ul><h3 id="Cookie小案例：记住上一次访问的时间"><a href="#Cookie小案例：记住上一次访问的时间" class="headerlink" title="Cookie小案例：记住上一次访问的时间"></a>Cookie小案例：记住上一次访问的时间</h3><ul><li><p>1.访问一个Servlet,如果是第一次访问，则提示：您好，欢迎您首次访问。</p></li><li><p>2.如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串</p></li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>1.可以采用Cookie来完成</p></li><li><p>2.在服务器中的Servlet判断是否有一个名为lastTime的cookie</p><ul><li><p>1.有：不是第一次访问，响应数据：（欢迎回来，您上次访问时间为xxxxxx）,在写回Cookie</p></li><li><p>2.没有：是第一次访问，响应数据（您好，欢迎首次访问），再写回Cookie(lastTime=xxxxx)</p></li></ul></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>cookieCase<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>SimpleFormatter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** - 2.在服务器中的Servlet判断是否有一个名为lastTime的cookie   - 1.有：不是第一次访问，响应数据：（欢迎回来，您上次访问时间为xxxxxx）,在写回Cookie   - 2.没有：是第一次访问，响应数据（您好，欢迎首次访问），再写回Cookie(lastTime=xxxxx) */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/cookieTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置响应的消息体的数据格式和编码</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有的cookie</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历cookies数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie c <span class="token operator">:</span>cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取cookie的名称</span>                String name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是否有lastTime</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取当前时间的字符串，重新设置cookie的值，再重新发送cookie</span>                    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    str <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//响应数据</span>                    String value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//URL解码</span>                    value <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>欢迎回来，您上次访问时间为:"</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置cookie的存活时间 一个月</span>                    c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">==</span> null <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>您好，欢迎您首次访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    </p><p>​        </p><p>​      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;会话技术&quot;&gt;&lt;a href=&quot;#会话技术&quot; class=&quot;headerlink&quot; title=&quot;会话技术&quot;&gt;&lt;/a&gt;会话技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.会话： &lt;strong&gt;一次会话&lt;/strong&gt;中包含多次请求和响应。   &lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
      <category term="Cookie" scheme="https://Yogaguo.github.io/categories/Servlet/Cookie/"/>
    
    
      <category term="Cookie" scheme="https://Yogaguo.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>一个空格引发的bug</title>
    <link href="https://Yogaguo.github.io/2019/09/17/Demo2019-9-17/"/>
    <id>https://Yogaguo.github.io/2019/09/17/Demo2019-9-17/</id>
    <published>2019-09-17T12:44:16.000Z</published>
    <updated>2019-10-04T11:38:59.802Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-tex"><code class="language-tex">今天在Tomcat部署本地图片，通过浏览器访问，但是，在html中写好图片超链接后，点击发现报错 500 。。那就代表Tomcat服务器内部有错误，在看看server log ,发现是 Tomcat内部访问不到图片，但是我的图片就在web目录下(IDEA),在本地查看，D:\IntelliJIDEA2018\TestLogin\out\artifacts\TestLogin_war_exploded下也有(这是部署的项目的服务器路径)，弄了好长时间，最后竟然是因为 在html中写图片的超链接时路径多了空格，所以浏览器地址栏显示20%!!!表示有空格，改过来，重启Tomcat即可PS:  真实心酸血泪史呀</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre class=&quot; language-tex&quot;&gt;&lt;code class=&quot;language-tex&quot;&gt;今天在Tomcat部署本地图片，通过浏览器访问，但是，在html中写好图片超链接后，点击发现报错 500 。。
那就代表Tomcat服务器内部有错误，在看看server l
      
    
    </summary>
    
    
      <category term="采坑" scheme="https://Yogaguo.github.io/categories/%E9%87%87%E5%9D%91/"/>
    
    
      <category term="Tomcat" scheme="https://Yogaguo.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Response对象的学习及案例</title>
    <link href="https://Yogaguo.github.io/2019/09/17/demo7/"/>
    <id>https://Yogaguo.github.io/2019/09/17/demo7/</id>
    <published>2019-09-17T10:41:42.000Z</published>
    <updated>2019-10-04T11:38:59.939Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1. HTTP协议：响应消息2. Response对象3. ServletContext对象</code></pre><h2 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h2><pre><code>1. 请求消息：客户端发送给服务器端的数据    * 数据格式：        1. 请求行        2. 请求头        3. 请求空行        4. 请求体2. 响应消息：服务器端发送给客户端的数据    * 数据格式：        1. 响应行            1. 组成：协议/版本 响应状态码 状态码描述            2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。                1. 状态码都是3位数字                 2. 分类：                    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码                    2. 2xx：成功。代表：200                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)                    4. 4xx：客户端错误。                        * 代表：                            * 404（请求路径没有对应的资源）                             * 405：请求方式没有对应的doXxx方法                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre><p>​<br>​            2. 响应头：<br>​                1. 格式：头名称： 值<br>​                2. 常见的响应头：<br>​                    1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式<br>​                    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据<br>​                        * 值：<br>​                            * in-line:默认值,在当前页面内打开<br>​                            * attachment;filename=xxx：以附件形式打开响应体。文件下载<br>​            3. 响应空行<br>​            4. 响应体:传输的数据</p><pre class=" language-html"><code class="language-html">    * 响应字符串格式        HTTP/1.1 200 OK        Content-Type: text/html;charset=UTF-8        Content-Length: 101        Date: Wed, 06 Jun 2018 07:08:42 GMT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>          hello , response          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 功能：设置响应消息    <span class="token number">1</span><span class="token punctuation">.</span> 设置响应行        <span class="token number">1</span><span class="token punctuation">.</span> 格式：HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> ok        <span class="token number">2</span><span class="token punctuation">.</span> 设置状态码：<span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span>     <span class="token number">2</span><span class="token punctuation">.</span> 设置响应头：<span class="token function">setHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span>     <span class="token number">3</span><span class="token punctuation">.</span> 设置响应体：        <span class="token operator">*</span> 使用步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 获取输出流                <span class="token operator">*</span> 字符输出流：PrintWriter <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">*</span> 字节输出流：ServletOutputStream <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token number">2</span><span class="token punctuation">.</span> 使用输出流，将数据输出到客户端浏览器</code></pre><pre><code>* 案例：    1. 完成重定向        * 重定向：资源跳转的方式        * 代码实现：            //1. 设置状态码为302            response.setStatus(302);            //2.设置响应头location            response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);</code></pre><pre class=" language-java"><code class="language-java">            <span class="token comment" spellcheck="true">//简单的重定向方法</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/day15/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span> 重定向的特点<span class="token operator">:</span>redirect            <span class="token number">1</span><span class="token punctuation">.</span> 地址栏发生变化            <span class="token number">2</span><span class="token punctuation">.</span> 重定向可以访问其他站点<span class="token punctuation">(</span>服务器<span class="token punctuation">)</span>的资源            <span class="token number">3</span><span class="token punctuation">.</span> 重定向是两次请求。不能使用request对象来共享数据        <span class="token operator">*</span> 转发的特点：forward            <span class="token number">1</span><span class="token punctuation">.</span> 转发地址栏路径不变            <span class="token number">2</span><span class="token punctuation">.</span> 转发只能访问当前服务器下的资源            <span class="token number">3</span><span class="token punctuation">.</span> 转发是一次请求，可以使用request对象来共享数据        <span class="token operator">*</span> forward 和  redirect 区别        <span class="token operator">*</span> 路径写法：            <span class="token number">1</span><span class="token punctuation">.</span> 路径分类                <span class="token number">1</span><span class="token punctuation">.</span> 相对路径：通过相对路径不可以确定唯一资源                    <span class="token operator">*</span> 如：<span class="token punctuation">.</span>/index<span class="token punctuation">.</span>html                    <span class="token operator">*</span> 不以<span class="token operator">/</span>开头，以<span class="token punctuation">.</span>开头路径                    <span class="token operator">*</span> 规则：找到当前资源和目标资源之间的相对位置关系                        <span class="token operator">*</span> <span class="token punctuation">.</span>/：当前目录                        <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token operator">:</span>后退一级目录                <span class="token number">2</span><span class="token punctuation">.</span> 绝对路径：通过绝对路径可以确定唯一资源                    <span class="token operator">*</span> 如：http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">/</span>day15<span class="token operator">/</span>responseDemo2        <span class="token operator">/</span>day15<span class="token operator">/</span>responseDemo2                    <span class="token operator">*</span> 以<span class="token operator">/</span>开头的路径                    <span class="token operator">*</span> 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出                        <span class="token operator">*</span> 给客户端浏览器使用：需要加虚拟目录<span class="token punctuation">(</span>项目的访问路径<span class="token punctuation">)</span>                            <span class="token operator">*</span> 建议虚拟目录动态获取：request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">*</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> <span class="token punctuation">,</span> <span class="token operator">&lt;</span>form<span class="token operator">></span> 重定向<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token operator">*</span> 给服务器使用：不需要加虚拟目录                            <span class="token operator">*</span> 转发路径</code></pre><p>​<br>​                        </p><pre class=" language-java"><code class="language-java">    <span class="token number">2</span><span class="token punctuation">.</span> 服务器输出字符数据到浏览器        <span class="token operator">*</span> 步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 获取字符输出流            <span class="token number">2</span><span class="token punctuation">.</span> 输出数据        <span class="token operator">*</span> 注意：            <span class="token operator">*</span> 乱码问题：                <span class="token number">1</span><span class="token punctuation">.</span> PrintWriter pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取的流的默认编码是ISO<span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>                <span class="token number">2</span><span class="token punctuation">.</span> 设置该流的默认编码                <span class="token number">3</span><span class="token punctuation">.</span> 告诉浏览器响应体使用的编码                <span class="token comment" spellcheck="true">//简单的形式，设置编码，是在获取流之前设置</span>                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">.</span> 服务器输出字节数据到浏览器        <span class="token operator">*</span> 步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 获取字节输出流            <span class="token number">2</span><span class="token punctuation">.</span> 输出数据    <span class="token number">4</span><span class="token punctuation">.</span> 验证码        <span class="token number">1</span><span class="token punctuation">.</span> 本质：图片        <span class="token number">2</span><span class="token punctuation">.</span> 目的：防止恶意表单注册</code></pre><h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 概念：代表整个web应用，可以和程序的容器<span class="token punctuation">(</span>服务器<span class="token punctuation">)</span>来通信<span class="token number">2</span><span class="token punctuation">.</span> 获取：    <span class="token number">1</span><span class="token punctuation">.</span> 通过request对象获取        request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">.</span> 通过HttpServlet获取        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 功能：    <span class="token number">1</span><span class="token punctuation">.</span> 获取MIME类型：        <span class="token operator">*</span> MIME类型<span class="token operator">:</span>在互联网通信过程中定义的一种文件数据类型            <span class="token operator">*</span> 格式： 大类型<span class="token operator">/</span>小类型   text<span class="token operator">/</span>html        image<span class="token operator">/</span>jpeg        <span class="token operator">*</span> 获取：String <span class="token function">getMimeType</span><span class="token punctuation">(</span>String file<span class="token punctuation">)</span>      <span class="token number">2</span><span class="token punctuation">.</span> 域对象：共享数据        <span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>        <span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>        <span class="token operator">*</span> ServletContext对象范围：所有用户所有请求的数据    <span class="token number">3</span><span class="token punctuation">.</span> 获取文件的真实<span class="token punctuation">(</span>服务器<span class="token punctuation">)</span>路径        <span class="token number">1</span><span class="token punctuation">.</span> 方法：String <span class="token function">getRealPath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>               String b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//web目录下资源访问</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            String c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//WEB-INF目录下的资源访问</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            String a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//src目录下的资源访问</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span> 文件下载需求：    <span class="token number">1</span><span class="token punctuation">.</span> 页面显示超链接    <span class="token number">2</span><span class="token punctuation">.</span> 点击超链接后弹出下载提示框    <span class="token number">3</span><span class="token punctuation">.</span> 完成图片文件下载</code></pre><pre><code>* 分析：    1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求    2. 任何资源都必须弹出下载提示框    3. 使用响应头设置资源的打开方式：        * content-disposition:attachment;filename=xxx</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 步骤：    <span class="token number">1</span><span class="token punctuation">.</span> 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename    <span class="token number">2</span><span class="token punctuation">.</span> 定义Servlet        <span class="token number">1</span><span class="token punctuation">.</span> 获取文件名称        <span class="token number">2</span><span class="token punctuation">.</span> 使用字节输入流加载文件进内存        <span class="token number">3</span><span class="token punctuation">.</span> 指定response的响应头： content<span class="token operator">-</span>disposition<span class="token operator">:</span>attachment<span class="token punctuation">;</span>filename<span class="token operator">=</span>xxx        <span class="token number">4</span><span class="token punctuation">.</span> 将数据写出到response输出流</code></pre><pre><code>* 问题：    * 中文文件问题        * 解决思路：            1. 获取客户端使用的浏览器版本信息            2. 根据不同的版本信息，设置filename的编码方式不同  </code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day14_test/imgs/1.avi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day14_test/imgs/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day14_test/downLoadServlet?filename <span class="token punctuation">=</span> 1.avi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day14_test/downLoadServlet?filename <span class="token punctuation">=</span> 1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>   </code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/downLoadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">downLoadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取请求参数，文件名称</span>        String filename <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.使用字节输入流加载文件进内存</span>        <span class="token comment" spellcheck="true">//2.1找到文件服务器路径</span>        ServletContext servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/imgs/"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意 imgs文件放在web目录下！！！！</span>        <span class="token comment" spellcheck="true">//2.2用字节流关联</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.设置response的响应头</span>        <span class="token comment" spellcheck="true">//3.1设置响应头类型：content-type</span>        String mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文件的mime类型</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.2设置响应头打开方式:content-disposition</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.将输入流的数据写出到输出流中</span>        ServletOutputStream sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>                                                                  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1. HTTP协议：响应消息
2. Response对象
3. ServletContext对象&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;HTTP协议：&quot;&gt;&lt;a href=&quot;#HTTP协议：&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
    
      <category term="Response对象" scheme="https://Yogaguo.github.io/tags/Response%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池技术与Spring Template</title>
    <link href="https://Yogaguo.github.io/2019/09/12/Demo5-1/"/>
    <id>https://Yogaguo.github.io/2019/09/12/Demo5-1/</id>
    <published>2019-09-12T10:17:35.000Z</published>
    <updated>2019-10-04T11:38:59.902Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1. 数据库连接池2. Spring JDBC : JDBC Template</code></pre><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><pre><code>1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。        当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。2. 好处：    1. 节约资源    2. 用户访问高效3. 实现：    1. 标准接口：DataSource   javax.sql包下的        1. 方法：            * 获取连接：getConnection()            * 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接    2. 一般我们不去实现它，有数据库厂商来实现        1. C3P0：数据库连接池技术        2. Druid：数据库连接池实现技术，由阿里巴巴提供的</code></pre><pre><code>4. C3P0：数据库连接池技术    * 步骤：        1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，            * 不要忘记导入数据库驱动jar包        2. 定义配置文件：            * 名称： c3p0.properties 或者 c3p0-config.xml            * 路径：直接将文件放在src目录下即可。        3. 创建核心对象 数据库连接池对象 ComboPooledDataSource        4. 获取连接： getConnection    * 代码：         //1.创建数据库连接池对象        DataSource ds  = new ComboPooledDataSource();        //2. 获取连接对象        Connection conn = ds.getConnection();5. Druid：数据库连接池实现技术，由阿里巴巴提供的    1. 步骤：        1. 导入jar包 druid-1.0.9.jar        2. 定义配置文件：            * 是properties形式的            * 可以叫任意名称，可以放在任意目录下        3. 加载配置文件。Properties        4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory        5. 获取连接：getConnection    * 代码：         //3.加载配置文件        Properties pro = new Properties();        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);        pro.load(is);        //4.获取连接池对象        DataSource ds = DruidDataSourceFactory.createDataSource(pro);        //5.获取连接        Connection conn = ds.getConnection();    2. 定义工具类        1. 定义一个类 JDBCUtils        2. 提供静态代码块加载配置文件，初始化连接池对象        3. 提供方法            1. 获取连接方法：通过数据库连接池获取连接            2. 释放资源            3. 获取连接池的方法</code></pre><pre><code>    * 代码：        public class JDBCUtils {            //1.定义成员变量 DataSource            private static DataSource ds ;            static{                try {                    //1.加载配置文件                    Properties pro = new Properties();                    pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));                    //2.获取DataSource                    ds = DruidDataSourceFactory.createDataSource(pro);                } catch (IOException e) {                    e.printStackTrace();                } catch (Exception e) {                    e.printStackTrace();                }            }            /**             * 获取连接             */            public static Connection getConnection() throws SQLException {                return ds.getConnection();            }            /**             * 释放资源             */            public static void close(Statement stmt,Connection conn){               /* if(stmt != null){                    try {                        stmt.close();                    } catch (SQLException e) {                        e.printStackTrace();                    }                }                if(conn != null){                    try {                        conn.close();//归还连接                    } catch (SQLException e) {                        e.printStackTrace();                    }                }*/               close(null,stmt,conn);            }</code></pre><p>​            </p><pre><code>            public static void close(ResultSet rs , Statement stmt, Connection conn){</code></pre><p>​            </p><pre><code>                if(rs != null){                    try {                        rs.close();                    } catch (SQLException e) {                        e.printStackTrace();                    }                }</code></pre><p>​            </p><pre><code>                if(stmt != null){                    try {                        stmt.close();                    } catch (SQLException e) {                        e.printStackTrace();                    }                }                if(conn != null){                    try {                        conn.close();//归还连接                    } catch (SQLException e) {                        e.printStackTrace();                    }                }            }            /**             * 获取连接池方法             */            public static DataSource getDataSource(){                return  ds;            }        }</code></pre><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><pre><code>* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update():执行DML语句。增、删、改语句        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合            * 注意：这个方法查询的结果集长度只能是1        * queryForList():查询结果将结果集封装为list集合            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中        * query():查询结果，将结果封装为JavaBean对象            * query的参数：RowMapper                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject：查询结果，将结果封装为对象            * 一般用于聚合函数的查询    4. 练习：        * 需求：            1. 修改1号数据的 salary 为 10000            2. 添加一条记录            3. 删除刚才添加的记录            4. 查询id为1的记录，将其封装为Map集合            5. 查询所有记录，将其封装为List            6. 查询所有记录，将其封装为Emp对象的List集合            7. 查询总记录数        * 代码：            import cn.itcast.domain.Emp;            import cn.itcast.utils.JDBCUtils;            import org.junit.Test;            import org.springframework.jdbc.core.BeanPropertyRowMapper;            import org.springframework.jdbc.core.JdbcTemplate;            import org.springframework.jdbc.core.RowMapper;            import java.sql.Date;            import java.sql.ResultSet;            import java.sql.SQLException;            import java.util.List;            import java.util.Map;            public class JdbcTemplateDemo2 {                //Junit单元测试，可以让方法独立执行</code></pre><p>​                </p><pre><code>                //1. 获取JDBCTemplate对象                private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());                /**                 * 1. 修改1号数据的 salary 为 10000                 */                @Test                public void test1(){                    //2. 定义sql                    String sql = &quot;update emp set salary = 10000 where id = 1001&quot;;                    //3. 执行sql                    int count = template.update(sql);                    System.out.println(count);                }                /**                 * 2. 添加一条记录                 */                @Test                public void test2(){                    String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;                    int count = template.update(sql, 1015, &quot;郭靖&quot;, 10);                    System.out.println(count);                }                /**                 * 3.删除刚才添加的记录                 */                @Test                public void test3(){                    String sql = &quot;delete from emp where id = ?&quot;;                    int count = template.update(sql, 1015);                    System.out.println(count);                }                /**                 * 4.查询id为1001的记录，将其封装为Map集合                 * 注意：这个方法查询的结果集长度只能是1                 */                @Test                public void test4(){                    String sql = &quot;select * from emp where id = ? or id = ?&quot;;                    Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);                    System.out.println(map);                    //{id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20}                }                /**                 * 5. 查询所有记录，将其封装为List                 */                @Test                public void test5(){                    String sql = &quot;select * from emp&quot;;                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);                    for (Map&lt;String, Object&gt; stringObjectMap : list) {                        System.out.println(stringObjectMap);                    }                }                /**                 * 6. 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6(){                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() {                        @Override                        public Emp mapRow(ResultSet rs, int i) throws SQLException {                            Emp emp = new Emp();                            int id = rs.getInt(&quot;id&quot;);                            String ename = rs.getString(&quot;ename&quot;);                            int job_id = rs.getInt(&quot;job_id&quot;);                            int mgr = rs.getInt(&quot;mgr&quot;);                            Date joindate = rs.getDate(&quot;joindate&quot;);                            double salary = rs.getDouble(&quot;salary&quot;);                            double bonus = rs.getDouble(&quot;bonus&quot;);                            int dept_id = rs.getInt(&quot;dept_id&quot;);                            emp.setId(id);                            emp.setEname(ename);                            emp.setJob_id(job_id);                            emp.setMgr(mgr);                            emp.setJoindate(joindate);                            emp.setSalary(salary);                            emp.setBonus(bonus);                            emp.setDept_id(dept_id);                            return emp;                        }                    });</code></pre><p>​                </p><pre><code>                    for (Emp emp : list) {                        System.out.println(emp);                    }                }                /**                 * 6. 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6_2(){                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));                    for (Emp emp : list) {                        System.out.println(emp);                    }                }                /**                 * 7. 查询总记录数                 */                @Test                public void test7(){                    String sql = &quot;select count(id) from emp&quot;;                    Long total = template.queryForObject(sql, Long.class);                    System.out.println(total);                }            }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1. 数据库连接池

2. Spring JDBC : JDBC Template&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;数据库连接池&quot;&gt;&lt;a href=&quot;#数据库连接池&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池&quot;&gt;&lt;/a&gt;数据库
      
    
    </summary>
    
    
      <category term="JDBC" scheme="https://Yogaguo.github.io/categories/JDBC/"/>
    
    
      <category term="连接池" scheme="https://Yogaguo.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Request与Response对象介绍</title>
    <link href="https://Yogaguo.github.io/2019/09/11/Demo5/"/>
    <id>https://Yogaguo.github.io/2019/09/11/Demo5/</id>
    <published>2019-09-11T10:38:45.000Z</published>
    <updated>2019-10-04T11:38:59.918Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h5><pre><code>Servlet-- 接口  |  GenericServlet-- 抽象类  |  HttpServlet-- 抽象类  </code></pre><ul><li>GernericServlet:将Servlet接口中的方法做了默认空实现，只将Service()方法作了抽象，将来定义Servlet类时，可以继承GernericServlet，实现Service()  </li><li>HttpServlet:对http协议的一种封装，为了简化操作  <ul><li>定义类继承HttpServlet  </li><li>复写doGet()/doPost()  <h5 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h5></li></ul></li><li>urlpartten:Servlet访问路径：一个Servlet可以定义多个访问路径  <pre><code>@WebServlet({&quot;/demo05&quot;,&quot;/demo005&quot;})  </code></pre></li><li>路径的定义规则  <ul><li>1 /xxx  </li><li>2 /xxx/xxx:多层路径</li><li>3 <em>.do(</em>为通配符)  <h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP:"></a>HTTP:</h5></li></ul></li><li>概念：<strong>Hyper Text Transfer Protocol 超文本传输协议</strong>  </li><li>传输协议：定义了客户端和服务器端通信时，发送数据的格式  </li><li>HTTP协议特点：<ul><li>1 基于TCP/IP的高级协议  </li><li>2 默认端口为80  </li><li>3 基于请求/响应模型：一次请求对应一次响应  </li><li>4 无状态协议：每次请求之间相互独立，不能交互数据  <h5 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h5><h6 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h6></li></ul></li><li>请求方式  请求url  请求协议/版本  <pre><code>GET/Demo.html HTTP/1.1  </code></pre><ul><li>HTTP有7中请求方式，常用的由2中  <ul><li><strong>GET:==请求参数在请求行中==，即在url后,请求的url是有限制的，不太安全</strong>  </li><li><strong>Post:==请求参数在请求体中==，请求的url没有限制，相对安全</strong><h6 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h6>请求头名称:请求头值  </li></ul></li></ul></li><li>常见的请求头  <ul><li>User-Agent:浏览器告诉服务器，我访问你使用的浏览器版本信息  </li><li>Referer:<a href="http://localhost/index.html-&gt;" target="_blank" rel="noopener">http://localhost/index.html-&gt;</a> 告诉服务器，我（当前请求）从哪里来  <ul><li>防止别人盗取链接</li><li>做些统计的工作<h6 id="请求空行"><a href="#请求空行" class="headerlink" title="请求空行"></a>请求空行</h6></li></ul></li></ul></li><li>空行：分割Post请求的请求头和请求体的  <h6 id="请求体（正文）"><a href="#请求体（正文）" class="headerlink" title="请求体（正文）"></a>请求体（正文）</h6></li><li>封装Post请求消息的请求参数的<img src="/2019/09/11/Demo5/5.jpg"></li></ul><pre class=" language-xml"><code class="language-xml">   POST /index.html HTTP/1.1Host: localhost:8888Connection: keep-aliveContent-Length: 25Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: nullContent-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6uname=yogaguo</code></pre><h5 id="Requset"><a href="#Requset" class="headerlink" title="Requset"></a>Requset</h5><h6 id="request和response对象的基本原理"><a href="#request和response对象的基本原理" class="headerlink" title="request和response对象的基本原理"></a>request和response对象的基本原理</h6><ul><li>1 requset和response对象是由服务器创建的，我们只是使用  </li><li>2 request对象是获取请求消息，response对象是设置响应消息的  </li></ul><h6 id="request对象继承体系结构"><a href="#request对象继承体系结构" class="headerlink" title="request对象继承体系结构"></a>request对象继承体系结构</h6><pre><code>ServletRequest --接口 |  HttpServletRequest --接口  |  实现org.apache.catalina.connector.RequestFacade(类)</code></pre><h6 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h6><ul><li><p>1 获取请求消息数据  </p><ul><li><p>获取请求行数据:<code>Get/TestDemo02/demo02?name=yogaguo HTTP/1.1</code>  </p></li><li><p>方法：  </p><ul><li>1.获取请求方式：<code>String getMethod()</code>  </li><li>==2.获取虚拟目录==(TestDemo02)<code>String getContextPath</code>  </li><li>3.获取Servlet路径(/demo02)<code>String ServletPath()</code>  </li><li>4.获取Get方式的请求参数<code>String getQueryString</code>  </li><li>5.==获取请求的url== <code>/TestDemo02/demo02)</code> <code>String getRequestURI()</code>:返回的是 <code>/TestDemo02/demo</code>,==StringBuffer getRequestURL()==,返回的是<code>http://localhost/TestDemo02/demo02</code>  <ul><li>URL:统一资源定位符：<code>http://loclahost/TestDemo02/demo02</code>  </li><li>URI:统一资源标识符：<code>/TestDemo02/demo02</code></li></ul></li><li>6.获取客户机的IP地址：<code>String getRemoteAddr()</code></li></ul></li><li><p>获取请求头数据:  </p><ul><li>1==String getHeader(String name)== 通过请求头的名称获取请求头的值  </li><li>2 <code>Enumeration&lt;String&gt; getHeaderNames()</code> :获取所有请求头的名称 <strong>(Enumeration<string>类似迭代器)</string></strong></li></ul></li><li><p>获取请求体数据  </p><ul><li>只有==Post==请求方式才有请求体;在请求体中封装了Post请求的请求参数  </li><li>获取步骤：  <ul><li>1.获取流对象  <ul><li>1.<code>BufferedReader getReader()</code> ,获取字符输入流  </li><li>2.<code>ServletInputStream getInputStream()</code> ,获取字节输入流</li></ul></li><li>2.再从流对象中拿数据  <pre class=" language-java"><code class="language-java">BufferedReader reader<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String line<span class="token operator">=</span>null<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre></li></ul></li><li>其他方法：  <ul><li>1.获取请求参数的通用方法  <ul><li>String getParamater(String name):根据参数名获取参数值；String getParameterValues(String name):根据参数名获取参数值的数组  </li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java">Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> parameterNames<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               String name<span class="token operator">=</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                String value<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>  </code></pre><pre class=" language-markdown"><code class="language-markdown">{% asset_img 6.jpg  %} </code></pre><ul><li>中文乱码问题：  <ul><li>Get方式：Tomcat8已经将中文乱码问题解决了</li><li>Post方式：会乱码，解决办法，在获取参数时，设置request的编码<code>req.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ul></li><li><p>2.请求转发:一种在服务器内部的资源跳转方式</p><ul><li>步骤  <ul><li>1.通过request对象获取请求转发器对象: <code>RequestDispatcher getRequestDispatcher(String path)</code>  </li><li>2.通过RequestDispatcher对象来进行转发：<code>forward(ServletRequest request,ServletResponse response)</code>  </li></ul></li><li><strong>转发特点</strong>：<ul><li>1.<strong>浏览器地址栏路径不发生变化</strong>  </li><li>2.<strong>只能转发到当前服务器内部的资源中</strong>  </li><li>3.<strong>转发是一次请求</strong></li></ul></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo7"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo07</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo7被访问了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转发到demo8资源</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/requestDemo8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo08</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demo8被访问了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  demo7被访问了。。。Demo8被访问了</code></pre><ul><li>3.共享数据:<ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，所以request域一般用于请求转发的多个资源中取共享数据==  </li><li>方法：  <ul><li>1.setAttribute(String name,Object obj):存储数据  </li><li>2.Object getAttribute(String name):通过键获取值  </li><li>3.void removeAttribute(String name):通过键移除键值对</li></ul></li><li>4.获取ServletContext  </li></ul></li></ul><h2 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h2><h3 id="编写login-html登录页面"><a href="#编写login-html登录页面" class="headerlink" title="编写login.html登录页面"></a>编写login.html登录页面</h3><pre class=" language-html"><code class="language-html">  ```html  <span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day14_test/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>  ```</code></pre><h3 id="使用Druid数据库连接池技术，操作mysql"><a href="#使用Druid数据库连接池技术，操作mysql" class="headerlink" title="使用Druid数据库连接池技术，操作mysql"></a>使用Druid数据库连接池技术，操作mysql</h3><pre class=" language-java"><code class="language-java">  ```java  <span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>Utils<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * JDBC的工具类，使用的是Druid连接池   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource ds<span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>          Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//加载配置文件</span>              properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//初始化连接池对象</span>             ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 获取连接池对象       */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 获取连接Connection对象        */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ds<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ```</code></pre><h3 id="使用JDBCTemplate技术封装JDBC"><a href="#使用JDBCTemplate技术封装JDBC" class="headerlink" title="使用JDBCTemplate技术封装JDBC"></a>使用JDBCTemplate技术封装JDBC</h3><pre class=" language-java"><code class="language-java">  ```java  <span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>dao<span class="token punctuation">;</span>  <span class="token keyword">import</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span>  <span class="token keyword">import</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>DataAccessException<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BeanPropertyRowMapper<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 操作数据库中User表   */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userdao</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 声明JDBCTemplate对象共用       */</span>      <span class="token keyword">private</span> JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 登录方法       * @param loginUser，只有用户名和密码       * @return user的全部信息       */</span>      <span class="token keyword">public</span> User <span class="token function">login</span><span class="token punctuation">(</span>User loginUser<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//编写sql</span>              String sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//调用query方法</span>              User user <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>                      <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> user<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ```</code></pre><h3 id="登录成功跳转到SuccessServlet展示：登录成功，用户名，欢迎你"><a href="#登录成功跳转到SuccessServlet展示：登录成功，用户名，欢迎你" class="headerlink" title="登录成功跳转到SuccessServlet展示：登录成功，用户名，欢迎你"></a>登录成功跳转到SuccessServlet展示：登录成功，用户名，欢迎你</h3><pre class=" language-java"><code class="language-java">  ```java  <span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>Userdao<span class="token punctuation">;</span>  <span class="token keyword">import</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//设置编码</span>          req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          User loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          loginUser<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>          loginUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>          Userdao dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Userdao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          User user <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>user  <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>               req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/SuccessServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ```</code></pre><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><pre class=" language-java"><code class="language-java">  <span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/SuccessServlet"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuccessServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//获取request域中共享的user对象</span>          User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//给页面写句话</span>              <span class="token comment" spellcheck="true">//设置页面编码</span>              resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//输出到页面上</span>              resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",欢迎你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="登录失败，跳转到FailServlet展示：登录失败，用于名或密码错误"><a href="#登录失败，跳转到FailServlet展示：登录失败，用于名或密码错误" class="headerlink" title="登录失败，跳转到FailServlet展示：登录失败，用于名或密码错误"></a>登录失败，跳转到FailServlet展示：登录失败，用于名或密码错误</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> cn<span class="token punctuation">.</span>Yogaguo<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//给页面写句话</span>          <span class="token comment" spellcheck="true">//设置页面编码</span>          resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset = utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//输出到页面上</span>          resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录失败，用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Servlet体系结构&quot;&gt;&lt;a href=&quot;#Servlet体系结构&quot; class=&quot;headerlink&quot; title=&quot;Servlet体系结构&quot;&gt;&lt;/a&gt;Servlet体系结构&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;Servlet-- 接口  
|  
Generic
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
      <category term="request" scheme="https://Yogaguo.github.io/categories/Servlet/request/"/>
    
    
      <category term="Request" scheme="https://Yogaguo.github.io/tags/Request/"/>
    
  </entry>
  
  <entry>
    <title>Servlet与request入门（一)</title>
    <link href="https://Yogaguo.github.io/2019/09/11/Demo33/"/>
    <id>https://Yogaguo.github.io/2019/09/11/Demo33/</id>
    <published>2019-09-11T10:21:09.000Z</published>
    <updated>2019-10-04T11:38:59.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ul><li>概念：servlet applet,运行在服务器端的小程序,servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则 </li><li>将来我们自定义一个类，实现复写Servlet接口，复写方法.  <h4 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h4></li><li>1.创建JavaEE的项目  <img src="/2019/09/11/Demo33/01.jpg"></li><li>2.定义一个类，实现Servlet接口，实现接口中的抽象方法<br><code>public class ServletDemo01 implements Servlet</code></li><li>3.配置Servlet，在web.xml中配置 <pre><code>&lt;!--配置Servlet --&gt;  &lt;servlet&gt;      &lt;servlet-name&gt;demo01&lt;/servlet-name&gt;      &lt;servlet-class&gt;cn.yogaguo.web.servlet.ServletDemo01&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;      &lt;servlet-name&gt;demo01&lt;/servlet-name&gt;      &lt;url-pattern&gt;/demo01&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;  </code></pre><ul><li>4.执行原理:  <ul><li>当服务端接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径  </li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。如果有，则在找到对应的<servlet-class>全类名  </servlet-class></url-pattern></li><li>tomcat会将字节码文件加载到内存，并且创建其对象  </li><li>调用其方法  <h4 id="Servlet中的生命周期"><a href="#Servlet中的生命周期" class="headerlink" title="Servlet中的生命周期:"></a>Servlet中的生命周期:</h4></li></ul></li></ul></li><li>被创建:执行init方法,只执行一次  <ul><li>Servlet什么时候被创建  <ul><li>默认情况下，第一次被访问，Servlet被创建  </li><li>当然，可以配置Servlet的创建时机    </li></ul>  <strong>在<servlet>标签下配置</servlet></strong>  <pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;demo02&lt;/servlet-name&gt;    &lt;servlet-class&gt;cn.yogaguo.web.servlet.ServletDemo02&lt;/servlet-class&gt;    &lt;!--指定Servlet的创建时机           1.第一次被访问时，创建                * &lt;load-on-startup&gt;的值为负数，对应1情况（默认值为-1）           2.在服务器启动时，创建                * &lt;load-on-startup&gt;的值为0或正整数           --&gt;    &lt;load-on-startup&gt;5&lt;/load-on-startup&gt;&lt;/servlet&gt;  </code></pre></li></ul><strong>Servlet的init方法只执行一次，说明了一个Servlet在内存中只存在一个对象，Servlet是单例的,所以，多个用户访问时，可能存在线程安全问题</strong><br><del>尝试加锁，但是不行，影响了性能</del>,<strong><em>解决办法：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要对其修改值，避免并发的操作</em></strong></li><li>提供服务:执行service方法，执行多次<br>每次访问Servlet时，Service方法都会被调用一次</li><li>被销毁：执行destory方法，只执行一次<br>Servlet被销毁时执行，即服务器正常关闭时，<strong>注意：destory方法在Servlet被销毁之前执行，一般用于释放资源</strong>  <h4 id="解决Servlet配置问题"><a href="#解决Servlet配置问题" class="headerlink" title="解决Servlet配置问题"></a>解决Servlet配置问题</h4></li><li>Servlet3.0之后，支持注解配置，可以不需要web.xml  <img src="/2019/09/11/Demo33/02.jpg"></li><li>步骤：  </li></ul><p>1.创建JavaEE的项目,选择Servlet的版本，3.0以上，可以不创建web.xml<br>2.定义一个类，实现Servlet接口<br>3.复写方法<br><strong>4.在类上使用@WebServlet注解，进行配置</strong><br><code>@WebServlet(urlPatterns = &quot;/资源路径&quot;)</code>  </p><h4 id="IDEA与Tamcat的相关配置"><a href="#IDEA与Tamcat的相关配置" class="headerlink" title="IDEA与Tamcat的相关配置"></a>IDEA与Tamcat的相关配置</h4><ul><li>1.IDEA会为每一个tomcat部署的项目单独建立一份配置文件<br>查看控制台的输出log:Using CATALINA_BASE:   “C:\Users\LENOVO.IntelliJIdea2018.2\system\tomcat_Test”  </li><li>2.工作空间目录和Tomcat部署的web项目  <ul><li><strong>Tomcat真正访问的是“Tomcat部署的web项目，以我电脑为例 D:\IntelliJIDEA2018\Test\out\artifacts\TestDemo02_war_exploded”，Tomcat部署的web项目对应着工作空间项目的web目录下的所有资源，而且web-INFO下的classes对应的字节码文件是工作空间src下的Java文件被编译后放到里面的</strong>  </li><li><strong><em>WEB_INFO目录下的资源不能被浏览器直接访问，所以一般不把一些静态资源放到这下面</em></strong>  </li><li>在Tomcat如何断点调试<br>使用“小虫子”启动  <img src="/2019/09/11/Demo33/03.jpg"></li></ul></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念：servlet applet,运行在服务器端的小程序,servlet就是一个接口，
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
      <category term="Tomcat" scheme="https://Yogaguo.github.io/categories/Servlet/Tomcat/"/>
    
    
      <category term="servlet" scheme="https://Yogaguo.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>Web相关知识入门</title>
    <link href="https://Yogaguo.github.io/2019/09/11/Demo2/"/>
    <id>https://Yogaguo.github.io/2019/09/11/Demo2/</id>
    <published>2019-09-11T09:07:56.000Z</published>
    <updated>2019-10-04T11:38:59.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web服务入门介绍"><a href="#Web服务入门介绍" class="headerlink" title="Web服务入门介绍"></a>Web服务入门介绍</h2><ul><li><p>web相关概念回顾</p></li><li><p>web服务器软件:Tomcat</p></li><li><p>Servlet入门学习  </p><h3 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h3></li><li><p>1.软件架构  </p><ul><li>1.C/S:客户端/服务器端    </li><li>2.B/S:浏览器/服务器端 (重点) </li></ul></li><li><p>2.资源分类  </p><ul><li>1.静态资源:所有用户访问后，得到的结果都是一样的,静态资源可以直接被浏览器解析 * 如:html,css,Javascript  </li><li>2.动态资源:每个用户访问相同资源后，得到的结果可能不一样 ,动态资源被访问后需要先转为静态资源，再返回给浏览器(Response) *如 servlet/jsp,php  </li></ul></li><li><p>3.网络通讯三要素  </p><ul><li>1.IP:电子设备在网络中的唯一标识 </li><li>2.端口:应用程序在计算机中的唯一标识 0-65535</li><li>3.传输协议:规定了数据传输的规范<ul><li>1.基础协议:  <ul><li>1.tcp:安全的协议，三次握手确认双方都在线，在进行传输 ，速度稍慢 </li><li>2.udp:不安全协议，速度快  <h3 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h3></li></ul></li></ul></li></ul></li><li><p>1.服务器：安装了服务器软件的计算机  </p></li><li><p>2.服务器软件:接受用户的请求，处理请求，做出响应  </p></li><li><p>web服务器软件：接受用户的请求，处理请求，做出响应   </p><ul><li>1.在web服务器软件中可以部署web项目，让用户通过浏览器来访问这些项目  </li><li>2.web容器  </li></ul></li><li><p>3.常见java相关的web服务器软件  </p><ul><li>1.webLogic:oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的  </li><li>2.webSphere:IBW公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的    </li><li>3.JBOSS:JBOSS公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的  </li><li>4.Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范(servlet/jsp),开源的，免费的  </li></ul></li><li><p>4.JavaEE:Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范  </p><h3 id="Tomcat-web服务器软件"><a href="#Tomcat-web服务器软件" class="headerlink" title="Tomcat:web服务器软件"></a>Tomcat:web服务器软件</h3></li><li><p>1.下载: <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官网地址</a>  </p></li><li><p>2.安装: 解压压缩包 (<strong>注意：安装目录建议不要有中文和空格</strong>) </p></li><li><p>3.卸载: 删除目录就行  </p></li><li><p>4.启动:bin/startup.bat双击该文件  </p><ul><li>1.访问自己：浏览器输入：(<a href="http://localhost:8888)(我自己该的端口号，默认8080)" target="_blank" rel="noopener">http://localhost:8888)(我自己该的端口号，默认8080)</a> 回车访问  </li><li>2.访问别人:(http://别人ip:8080)  </li><li>3.可能遇到的问题:  <ul><li>1.黑窗口一闪而过：没有正确配置JAVA_HOME环境变量  </li><li>2.启动报错：<ul><li>1.暴力解决-&gt;找到占用的端口号，并且找到对应进程，杀死该进程.  </li><li>2.温柔解决:修改自身端口号,   conf/server.xml     服务器的主配置文件   <strong>注意：改动此文件时先备份，以防改错</strong>  <pre><code>&lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;       connectionTimeout=&quot;20000&quot;       redirectPort=&quot;8443&quot; /&gt;  </code></pre></li></ul></li></ul></li></ul></li><li><p>5.关闭:</p><ul><li>1.bin目录命令窗口直接敲  shutdown/catalina stop 二者都可以,或者直接双击shutdown文件</li></ul></li><li><p>6.配置:</p><ul><li>1.部署项目的方式：  <ul><li>1.直接将项目放到webapps目录下即可  <ul><li><ol><li>/hello:项目的访问路径—&gt;虚拟目录  </li></ol></li><li>2.简单部署：将项目打包成war包,再将war包放置到webapps目录下，war包会自动解压  </li></ul></li><li>1.配置conf/server.xml文件  </li><li>1.在conf\Catalina\localhost创建任意名称的xml文件，在文件中编写  </li></ul></li><li>1.静态项目和动态项目  <ul><li>1.目录结构  <ul><li>1.Java动态项目的目录结构  <ul><li>项目根目录  <ul><li>WEB-INF目录：  <ul><li>web.xml:web项目核心配置文件  </li><li>class目录：放置字节码文件  </li><li>lib目录：放置依赖的jar包  </li></ul></li></ul></li></ul></li></ul></li><li>将Tomcat集成到IDEA中，并且创建JavaEE的项目,部署项目  <ul><li>Run-&gt;Edit configurations-&gt;Templates-&gt;Tomcat server-&gt;Local  </li><li>配置Tomcat路径  </li><li><img src="!%5B%5D(http://ww1.sinaimg.cn/large/006VKolAly1g6dcz3t5ywj30lv043glj.jpg)" alt="如图">  </li><li>热部署：保证每次更新资源，Tomcat会自动启动</li><li><img src="!%5B%5D(http://ww1.sinaimg.cn/large/006VKolAly1g6dd6hai4nj30bc03ka9w.jpg)" alt>  </li><li></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web服务入门介绍&quot;&gt;&lt;a href=&quot;#Web服务入门介绍&quot; class=&quot;headerlink&quot; title=&quot;Web服务入门介绍&quot;&gt;&lt;/a&gt;Web服务入门介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;web相关概念回顾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web服务器
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://Yogaguo.github.io/categories/Servlet/"/>
    
    
      <category term="Web" scheme="https://Yogaguo.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
